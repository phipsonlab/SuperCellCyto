[{"path":[]},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement putri.g@wehi.edu.au. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to SuperCellCyto","title":"Contributing to SuperCellCyto","text":"outlines propose change SuperCellCyto.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":"making-changes-to-the-package","dir":"","previous_headings":"","what":"Making changes to the package","title":"Contributing to SuperCellCyto","text":"want make change, please first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Making changes to the package","what":"Pull request process","title":"Contributing to SuperCellCyto","text":"Fork package clone onto computer. Install development dependencies devtools::install_dev_deps(). Create Git branch pull request (PR). can use usethis::pr_init(\"brief-description--change\"). Make changes, commit git. Make sure unit tests passing. can use devtools::test(). Create PR. Make sure title PR briefly describe change, body PR contain Fixes #issue-number.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to SuperCellCyto","text":"Please note SuperCellCyto project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to create supercells","text":"vignette describes steps generate supercells cytometry data using SuperCellCyto R package. Please note ’re still actively updating vignette (fact package ), welcome feedbacks improve . Please reach creating GitHub issues GitHub repository.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"How to create supercells","text":"SuperCellCyto can installed using remotes package CRAN: SuperCellCyto requires SuperCell R package installed run properly. use remotes::install_github command install SuperCellCyto, automatically installed. case doesn’t, can manually install using:","code":"# install remotes package first. install.packages(\"remotes\") # then use it to install SuperCellCyto remotes::install_github(\"phipsonlab/SuperCellCyto\") remotes::install_github(\"GfellerLab/SuperCell\")"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"preparing-your-dataset","dir":"Articles","previous_headings":"","what":"Preparing your dataset","title":"How to create supercells","text":"function creates supercells called runSuperCellCyto, operates data.table object, enhanced version R native data.frame. addition needing data stored data.table object also requires: markers using create supercells appropriately transformed, typically using either arcsinh transformation linear binning (using FlowJo). runSuperCellCyto perform data transformation scaling. object column denoting unique ID cell. likely create column , can simply just numerical value ranging 1 however many cells data. object column denoting biological sample cell comes . column critical ensure cells different samples mixed supercell. sure import CSV FCS files data.table object, /subsequently prepare object ready SuperCellCyto, please consult vignette. vignette, also provide explanation behind need cell ID sample column. vignette, simulate toy data using simCytoData function. Specifically, simulate 15 markers 3 samples, sample containing 10,000 cells. Hence total, toy dataset containing 15 markers 30,000 cells. toy dataset, transform data using arcsinh transformation. use base R asinh function : also create column Cell_id_dummy uniquely identify cell. values Cell_1, Cell_2, way Cell_x x number cells dataset. default, simCytoData function generate cells multiple samples, resulting data.table object already column called Sample denotes sample cells come . Let’s take note sample cell id column later.","code":"n_markers <- 15 n_samples <- 3 dat <- simCytoData(nmarkers = n_markers, ncells = rep(10000, n_samples)) head(dat) #>    Marker_1 Marker_2 Marker_3 Marker_4  Marker_5 Marker_6  Marker_7  Marker_8 #> 1: 5.124134 16.89234 6.273294 12.33832  7.533787 15.98308  8.873621 12.681678 #> 2: 6.708958 18.55570 6.887417 11.81793  7.708981 16.48432  9.377733 12.768561 #> 3: 4.469843 17.42681 5.633544 11.58515  7.518144 17.67355  7.631318 10.910921 #> 4: 5.657678 17.50818 7.174201 12.08175  9.295122 14.61792  9.626742  9.733229 #> 5: 6.159448 17.09668 5.726614 13.31707  8.869774 15.75360 10.769019 11.082796 #> 6: 5.479250 17.17305 6.276543 11.21462 10.031655 14.55071 10.351517 10.166123 #>    Marker_9 Marker_10 Marker_11 Marker_12 Marker_13 Marker_14 Marker_15 #> 1: 13.85048  17.87925  8.275328  5.963920  9.296443  17.42093  9.294936 #> 2: 10.62536  18.51627  6.996520  5.495710  9.887527  18.13805  7.107187 #> 3: 13.14048  19.60660  9.196299  3.839608  6.557428  15.55330  9.226700 #> 4: 11.53090  17.71182  8.180547  5.278889  6.122908  18.03302  9.840968 #> 5: 11.98184  21.10919  7.235977  6.234866  8.786967  17.23022  7.793643 #> 6: 12.43607  17.36570  6.200067  4.750903  8.886053  18.27922  8.379339 #>      Sample Cell_Id #> 1: Sample_1  Cell_1 #> 2: Sample_1  Cell_2 #> 3: Sample_1  Cell_3 #> 4: Sample_1  Cell_4 #> 5: Sample_1  Cell_5 #> 6: Sample_1  Cell_6 # Specify which columns are the markers to transform marker_cols <- paste0(\"Marker_\", seq_len(n_markers)) # The co-factor for arc-sinh cofactor <- 5  # Do the transformation dat_asinh <- asinh(dat[, marker_cols, with = FALSE] / cofactor)  # Rename the new columns marker_cols_asinh <- paste0(marker_cols, \"_asinh\") names(dat_asinh) <- marker_cols_asinh  # Add them our previously loaded data dat <- cbind(dat, dat_asinh)  head(dat[, marker_cols_asinh, with = FALSE]) #>    Marker_1_asinh Marker_2_asinh Marker_3_asinh Marker_4_asinh Marker_5_asinh #> 1:      0.8988203       1.931786      1.0505000       1.635154       1.198506 #> 2:      1.1036770       2.022163      1.1248244       1.595342       1.217726 #> 3:      0.8043771       1.961691      0.9681944       1.577048       1.196774 #> 4:      0.9713946       1.966170      1.1580670       1.615708       1.378751 #> 5:      1.0362294       1.943321      0.9804935       1.706269       1.337722 #> 6:      0.9475525       1.947600      1.0509049       1.547280       1.446463 #>    Marker_6_asinh Marker_7_asinh Marker_8_asinh Marker_9_asinh Marker_10_asinh #> 1:       1.878854       1.338099       1.660642       1.743123        1.986352 #> 2:       1.908364       1.386552       1.666997       1.498210        2.020109 #> 3:       1.975213       1.209244       1.522263       1.693782        2.075451 #> 4:       1.794001       1.409743       1.419517       1.572740        1.977294 #> 5:       1.865061       1.510376       1.536491       1.608040        2.147157 #> 6:       1.789641       1.474641       1.458396       1.642472        1.958315 #>    Marker_11_asinh Marker_12_asinh Marker_13_asinh Marker_14_asinh #> 1:        1.277812       1.0113453        1.378877        1.961367 #> 2:        1.137577       0.9497697        1.433530        2.000199 #> 3:        1.369350       0.7074228        1.085435        1.852871 #> 4:        1.267967       0.9202697        1.031615        1.994602 #> 5:        1.165111       1.0457008        1.329560        1.950791 #> 6:        1.041339       0.8457036        1.339319        2.007675 #>    Marker_15_asinh #> 1:        1.378734 #> 2:        1.150379 #> 3:        1.372250 #> 4:        1.429320 #> 5:        1.226905 #> 6:        1.288520 dat$Cell_id_dummy <- paste0(\"Cell_\", seq_len(nrow(dat))) head(dat$Cell_id_dummy, n = 10) #>  [1] \"Cell_1\"  \"Cell_2\"  \"Cell_3\"  \"Cell_4\"  \"Cell_5\"  \"Cell_6\"  \"Cell_7\"  #>  [8] \"Cell_8\"  \"Cell_9\"  \"Cell_10\" unique(dat$Sample) #> [1] \"Sample_1\" \"Sample_2\" \"Sample_3\" sample_col <- \"Sample\" cell_id_col <- \"Cell_id_dummy\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"creating-supercells","dir":"Articles","previous_headings":"","what":"Creating supercells","title":"How to create supercells","text":"Now data, let’s create supercells. , use runSuperCellCyto function pass markers, sample cell ID columns parameters. reason need specify markers function create supercells based expression markers. highly recommend creating supercells using markers data, let cell type cell state markers. However, reason want use subset markers data, make sure specify vector later pass runSuperCellCyto function. tutorial, use arcsinh transformed markers toy data. Let’s dig deeper object created: list containing 3 elements:","code":"supercells <- runSuperCellCyto(   dt = dat,   markers = marker_cols_asinh,   sample_colname = sample_col,   cell_id_colname = cell_id_col ) class(supercells) #> [1] \"list\" names(supercells) #> [1] \"supercell_expression_matrix\" \"supercell_cell_map\"          #> [3] \"supercell_object\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"supercell-object","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell object","title":"How to create supercells","text":"supercell_object contains metadata used create supercells. list, element contains metadata used create supercells sample. come handy need either regenerate supercells using different gamma values (get less supercells) debugging later line. regenerating supercells Controlling supercells granularity section .","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"supercell-expression-matrix","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell expression matrix","title":"How to create supercells","text":"supercell_expression_matrix contains marker expression supercell. calculated taking average marker expression cells contained within supercell. Therein, following columns: markers previously specified markers_col variable. example, arcsinh transformed markers toy data. column (Sample case) denoting sample supercell belongs , (note column name stored sample_col variable). SuperCellId column denoting unique ID supercell.","code":"head(supercells$supercell_expression_matrix) #>    Marker_1_asinh Marker_2_asinh Marker_3_asinh Marker_4_asinh Marker_5_asinh #> 1:      0.8696336       1.943406      1.1881239       1.607116       1.354130 #> 2:      0.8461249       1.974103      1.1049628       1.632219       1.205842 #> 3:      0.8337385       1.955214      1.0504905       1.627016       1.293334 #> 4:      0.9712895       1.932709      0.9987542       1.623297       1.309033 #> 5:      0.8556511       1.940832      1.2076255       1.593340       1.375412 #> 6:      0.8799402       1.925461      1.2473245       1.603923       1.298165 #>    Marker_6_asinh Marker_7_asinh Marker_8_asinh Marker_9_asinh Marker_10_asinh #> 1:       1.884963       1.418625       1.437682       1.598578        2.050795 #> 2:       1.883903       1.300182       1.482636       1.620029        2.046635 #> 3:       1.885207       1.444593       1.550615       1.593673        2.067444 #> 4:       1.879320       1.256407       1.597769       1.575554        2.046262 #> 5:       1.909430       1.422418       1.520584       1.594574        2.038343 #> 6:       1.868991       1.329269       1.572668       1.605334        2.053671 #>    Marker_11_asinh Marker_12_asinh Marker_13_asinh Marker_14_asinh #> 1:        1.068809       0.8994334        1.353988        1.934119 #> 2:        1.007403       0.8461839        1.072172        1.925567 #> 3:        1.226860       1.0097997        1.338638        1.935741 #> 4:        1.132111       1.0375398        1.241191        1.955135 #> 5:        1.110717       0.7971644        1.163922        1.927190 #> 6:        1.160597       0.7670027        1.244662        1.943927 #>    Marker_15_asinh   Sample                 SuperCellId #> 1:        1.383955 Sample_1 SuperCell_1_Sample_Sample_1 #> 2:        1.358328 Sample_1 SuperCell_2_Sample_Sample_1 #> 3:        1.374806 Sample_1 SuperCell_3_Sample_Sample_1 #> 4:        1.368921 Sample_1 SuperCell_4_Sample_Sample_1 #> 5:        1.440173 Sample_1 SuperCell_5_Sample_Sample_1 #> 6:        1.286865 Sample_1 SuperCell_6_Sample_Sample_1"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"supercellid","dir":"Articles","previous_headings":"Creating supercells > Supercell expression matrix","what":"SuperCellId","title":"How to create supercells","text":"Let’s look SuperCellId: Let’s break one , SuperCell_1_Sample_Sample_1. SuperCell_1 numbering (1 however many supercells sample) used uniquely identify supercell sample. Notably, may encounter (SuperCell_1, SuperCell_2) repeated across different samples, e.g., 3 supercells’ id pre-fixed SuperCell_1, make equal one another! SuperCell_1_Sample_Sample_1 contain cells Sample_1 SuperCell_1_Sample_Sample_2 contain cells Sample_2. now, may noticed appended sample name supercell id. aids differentiating supercells different samples.","code":"head(unique(supercells$supercell_expression_matrix$SuperCellId)) #> [1] \"SuperCell_1_Sample_Sample_1\" \"SuperCell_2_Sample_Sample_1\" #> [3] \"SuperCell_3_Sample_Sample_1\" \"SuperCell_4_Sample_Sample_1\" #> [5] \"SuperCell_5_Sample_Sample_1\" \"SuperCell_6_Sample_Sample_1\" supercell_ids <- unique(supercells$supercell_expression_matrix$SuperCellId) supercell_ids[grep(\"SuperCell_1_\", supercell_ids)] #> [1] \"SuperCell_1_Sample_Sample_1\" \"SuperCell_1_Sample_Sample_2\" #> [3] \"SuperCell_1_Sample_Sample_3\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"supercell-cell-map","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell cell map","title":"How to create supercells","text":"supercell_cell_map maps cell dataset supercell belongs . map useful later need expand supercells . Additionally, also reason need column dataset uniquely identify cell.","code":"head(supercells$supercell_cell_map) #>                      SuperCellID CellId   Sample #> 1: SuperCell_111_Sample_Sample_1 Cell_1 Sample_1 #> 2:  SuperCell_61_Sample_Sample_1 Cell_2 Sample_1 #> 3: SuperCell_215_Sample_Sample_1 Cell_3 Sample_1 #> 4: SuperCell_367_Sample_Sample_1 Cell_4 Sample_1 #> 5: SuperCell_196_Sample_Sample_1 Cell_5 Sample_1 #> 6:  SuperCell_21_Sample_Sample_1 Cell_6 Sample_1"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"running-runsupercellcyto-in-parallel","dir":"Articles","previous_headings":"","what":"Running runSuperCellCyto in parallel","title":"How to create supercells","text":"default, runSuperCellCyto process sample one . sample processed independent one another, strictly speaking, can process parallel. , need : Create BiocParallelParam object BiocParallel package. object can either type MulticoreParamor SnowParam. highly recommend consulting vignette information. Set number tasks BiocParallelParam object number samples dataset. Set load_balancing parameter runSuperCellCyto function TRUE. ensure even distribution supercell creation jobs. sample processed parallel job, don’t want job process large sample also assigned smaller samples possible. want know feature works, please refer manuscript. NOTE: set value workers param BiocParallelParam object total number cores computer, render computer useless anything else. Perhaps importantly, might blow RAM kill Rsession. find total number cores computer, can use parallel’s detectCores function. supply number minus one workers param BiocParallelParam object.","code":"n_cores <- detectCores() supercell_par <- runSuperCellCyto(   dt = dat,   markers = marker_cols_asinh,   sample_colname = sample_col,   cell_id_colname = cell_id_col,   BPPARAM = MulticoreParam(     workers = n_cores - 1,     tasks = n_samples   ),   load_balancing = TRUE )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"controlling-supercells-granularity","dir":"Articles","previous_headings":"","what":"Controlling supercells granularity","title":"How to create supercells","text":"described runSuperCellCyto function’s documentation, let’s briefly go . runSuperCellCyto function equipped various parameters can customised alter composition supercells. one likely used gamma parameter, denoted gam function. default, value gam set 20, found work well cases. gamma parameter controls many supercells generate, indirectly, many cells captured within supercell. parameter resolved following formula gamma=n_cells/n_supercells n_cell denotes number cells n_supercells denotes number supercells. general, larger gamma parameter set , less supercells get. Say instance 10,000 cells. gamma set 10, end 1,000 supercells, whereas gamma set 50, end 200 supercells. may noticed, reading sections , runSuperCellCyto ran sample independent , can set 1 value gamma parameter. Indeed, now, gamma value used across samples, depending many cells sample, end different number supercells sample. instance, say 10,000 cells sample 1, 100,000 cells sample 2. gamma set 10, sample 1, get 1,000 supercells (10,000/10) sample 2, get 10,000 supercells (100,000/10). note: whatever gamma value chose, expect supercell contain exactly number cells. behaviour intentional ensure rare cell types intermixed non-rare cell types supercell.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"adjusting-gamma-value-after-one-run-of-runsupercellcyto","dir":"Articles","previous_headings":"Controlling supercells granularity","what":"Adjusting gamma value after one run of runSuperCellCyto","title":"How to create supercells","text":"run runSuperCellCyto discarded SuperCell object generated (serious, please don’t!), can use object quickly regenerate supercells using different gamma values. example, using SuperCell object generated toy dataset, regenerate supercells using gamma 10 50. function recomputeSupercells. store output list, one element per gamma value. end list containing 2 elements. 1st element contains supercells generated using gamma = 10, 2nd contains supercells generated using gamma = 50. output generated recomputeSupercells essentially list: supercell_expression_matrix: data.table object contains marker expression supercell. supercell_cell_map: data.table maps cell corresponding supercell. mentioned , gamma dictates granularity supercells. Compared previous run gamma set 20, get supercells gamma = 10, less gamma = 50. Let’s see ’s case.","code":"addt_gamma_vals <- c(10, 50) supercells_addt_gamma <- lapply(addt_gamma_vals, function(gam) {   recomputeSupercells(     dt = dat,     sc_objects = supercells$supercell_object,     markers = marker_cols_asinh,     sample_colname = sample_col,     cell_id_colname = cell_id_col,     gam = gam   ) }) supercells_addt_gamma[[1]] #> $supercell_expression_matrix #>       Marker_1_asinh Marker_2_asinh Marker_3_asinh Marker_4_asinh #>    1:      0.9949692      1.9511182       1.005958       1.628860 #>    2:      0.9347974      1.9378131       1.230635       1.654701 #>    3:      0.8050027      1.9621454       1.092473       1.567154 #>    4:      1.0046972      1.9595027       1.139979       1.621129 #>    5:      0.9255056      1.9178539       1.036143       1.584485 #>   ---                                                             #> 2996:      1.7744370      1.0638131       1.687375       1.639442 #> 2997:      1.7602445      1.2091697       1.691296       1.478200 #> 2998:      1.8042129      0.9640658       1.784944       1.405599 #> 2999:      1.7103958      1.1403771       1.703546       1.515165 #> 3000:      1.8513491      0.8545257       1.802344       1.627332 #>       Marker_5_asinh Marker_6_asinh Marker_7_asinh Marker_8_asinh #>    1:       1.387382       1.892468       1.413002       1.514523 #>    2:       1.353071       1.893257       1.469129       1.580412 #>    3:       1.323188       1.876678       1.353252       1.630029 #>    4:       1.392959       1.928229       1.416052       1.582989 #>    5:       1.273791       1.897059       1.345859       1.462812 #>   ---                                                             #> 2996:       1.697990       1.933168       1.894575       1.298868 #> 2997:       1.716932       1.945731       1.827700       1.293884 #> 2998:       1.736833       1.956552       1.838938       1.399720 #> 2999:       1.559723       1.901723       1.863242       1.479822 #> 3000:       1.561935       1.916908       1.867033       1.421463 #>       Marker_9_asinh Marker_10_asinh Marker_11_asinh Marker_12_asinh #>    1:      1.6339844        2.065842       1.1087575       0.8837539 #>    2:      1.6228436        2.077369       1.1971934       0.6988923 #>    3:      1.6080215        2.050153       1.2804635       0.9142077 #>    4:      1.5796020        2.057714       1.1812553       0.7968864 #>    5:      1.5813536        2.029513       1.3490396       0.9917118 #>   ---                                                                #> 2996:      0.7492016        1.394080       1.1406412       1.7853039 #> 2997:      1.1154831        1.411661       0.8911369       1.7781835 #> 2998:      0.9917931        1.384076       0.8356362       1.8126991 #> 2999:      0.8853008        1.410212       0.8278715       1.8214315 #> 3000:      1.0135188        1.496283       0.9951526       1.7884556 #>       Marker_13_asinh Marker_14_asinh Marker_15_asinh   Sample #>    1:       1.2243709        1.953673       1.4036155 Sample_1 #>    2:       1.1764382        1.954560       1.4997645 Sample_1 #>    3:       1.3594016        1.963797       1.4194497 Sample_1 #>    4:       1.3475017        1.957526       1.4026282 Sample_1 #>    5:       1.1309334        1.918415       1.3878538 Sample_1 #>   ---                                                          #> 2996:       0.8314368        1.900554       1.0729511 Sample_3 #> 2997:       1.0587725        1.854615       0.9207799 Sample_3 #> 2998:       1.2235470        1.902259       1.0446115 Sample_3 #> 2999:       0.9668838        1.892723       0.9610025 Sample_3 #> 3000:       1.1152742        1.892342       1.0021487 Sample_3 #>                          SuperCellId #>    1:    SuperCell_1_Sample_Sample_1 #>    2:    SuperCell_2_Sample_Sample_1 #>    3:    SuperCell_3_Sample_Sample_1 #>    4:    SuperCell_4_Sample_Sample_1 #>    5:    SuperCell_5_Sample_Sample_1 #>   ---                                #> 2996:  SuperCell_996_Sample_Sample_3 #> 2997:  SuperCell_997_Sample_Sample_3 #> 2998:  SuperCell_998_Sample_Sample_3 #> 2999:  SuperCell_999_Sample_Sample_3 #> 3000: SuperCell_1000_Sample_Sample_3 #>  #> $supercell_cell_map #>                          SuperCellID     CellId   Sample #>     1:  SuperCell_31_Sample_Sample_1     Cell_1 Sample_1 #>     2: SuperCell_420_Sample_Sample_1     Cell_2 Sample_1 #>     3: SuperCell_686_Sample_Sample_1     Cell_3 Sample_1 #>     4: SuperCell_413_Sample_Sample_1     Cell_4 Sample_1 #>     5: SuperCell_955_Sample_Sample_1     Cell_5 Sample_1 #>    ---                                                   #> 29996: SuperCell_838_Sample_Sample_3 Cell_29996 Sample_3 #> 29997: SuperCell_132_Sample_Sample_3 Cell_29997 Sample_3 #> 29998: SuperCell_332_Sample_Sample_3 Cell_29998 Sample_3 #> 29999: SuperCell_673_Sample_Sample_3 Cell_29999 Sample_3 #> 30000: SuperCell_149_Sample_Sample_3 Cell_30000 Sample_3 n_supercells_gamma20 <- nrow(supercells$supercell_expression_matrix) n_supercells_gamma10 <- nrow(supercells_addt_gamma[[1]]$supercell_expression_matrix) n_supercells_gamma50 <- nrow(supercells_addt_gamma[[2]]$supercell_expression_matrix) n_supercells_gamma10 > n_supercells_gamma20 #> [1] TRUE n_supercells_gamma50 < n_supercells_gamma20 #> [1] TRUE"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"specifying-different-gamma-value-for-different-samples","dir":"Articles","previous_headings":"Controlling supercells granularity","what":"Specifying different gamma value for different samples","title":"How to create supercells","text":"future, may add ability specify different gam value different samples. now, want , need break data multiple data.table objects, containing data 1 sample, run runSuperCellCyto function different gam parameter value. Something like following: Subsequently, extract combine supercell_expression_matrix supercell_cell_map, need use rbind:","code":"n_markers <- 10 dat <- simCytoData(nmarkers = n_markers) markers_col <- paste0(\"Marker_\", seq_len(n_markers)) sample_col <- \"Sample\" cell_id_col <- \"Cell_Id\"  samples <- unique(dat[[sample_col]]) gam_values <- c(10, 20, 10)  supercells_diff_gam <- lapply(seq_len(length(samples)), function(i) {   sample <- samples[i]   gam <- gam_values[i]   dat_samp <- dat[dat$Sample == sample, ]   supercell_samp <- runSuperCellCyto(     dt = dat_samp,     markers = markers_col,     sample_colname = sample_col,     cell_id_colname = cell_id_col,     gam = gam   )   return(supercell_samp) }) supercell_expression_matrix <- do.call(   \"rbind\", lapply(supercells_diff_gam, function(x) x[[\"supercell_expression_matrix\"]]) )  supercell_cell_map <- do.call(   \"rbind\", lapply(supercells_diff_gam, function(x) x[[\"supercell_cell_map\"]]) ) rbind(head(supercell_expression_matrix, n = 3), tail(supercell_expression_matrix, n = 3)) #>     Marker_1 Marker_2  Marker_3  Marker_4  Marker_5  Marker_6  Marker_7 #> 1: 18.511958 18.83991 14.317267 18.677037 11.226660 12.616921 16.752067 #> 2: 18.559415 17.26919 15.671221 18.722432  8.964933 13.286377 16.563739 #> 3: 17.238225 19.50835 15.282530 19.595168  8.741980 14.225305 16.854601 #> 4:  6.215527 11.70194  8.872704  9.559115 16.023300  8.909979  5.192594 #> 5:  6.170731 12.36436  8.572452 10.949371 12.995176  9.048936  5.716125 #> 6:  5.167913 14.21574  9.869336 10.144189 15.246397  9.344853  7.452052 #>     Marker_8  Marker_9 Marker_10   Sample                   SuperCellId #> 1: 18.713249 12.514636 16.485753 Sample_1   SuperCell_1_Sample_Sample_1 #> 2: 19.220567 14.021536 16.285413 Sample_1   SuperCell_2_Sample_Sample_1 #> 3: 19.373506 13.095868 16.727656 Sample_1   SuperCell_3_Sample_Sample_1 #> 4:  9.513379  7.615793  9.607560 Sample_2 SuperCell_498_Sample_Sample_2 #> 5:  6.167756  6.863156 11.554773 Sample_2 SuperCell_499_Sample_Sample_2 #> 6:  7.300816  5.822821  9.994232 Sample_2 SuperCell_500_Sample_Sample_2 rbind(head(supercell_cell_map, n = 3), tail(supercell_cell_map, n = 3)) #>                      SuperCellID     CellId   Sample #> 1: SuperCell_663_Sample_Sample_1     Cell_1 Sample_1 #> 2: SuperCell_364_Sample_Sample_1     Cell_2 Sample_1 #> 3:   SuperCell_5_Sample_Sample_1     Cell_3 Sample_1 #> 4:  SuperCell_75_Sample_Sample_2 Cell_19998 Sample_2 #> 5:   SuperCell_5_Sample_Sample_2 Cell_19999 Sample_2 #> 6: SuperCell_107_Sample_Sample_2 Cell_20000 Sample_2"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"mixing-cells-from-different-samples-in-a-supercell","dir":"Articles","previous_headings":"","what":"Mixing cells from different samples in a supercell","title":"How to create supercells","text":"whatever reason don’t mind (perhaps point want) supercell contain cells different biological samples, still need sample column data.table. However, need essentially set value column exactly one unique value. way, SuperCellCyto treat cells coming one sample. Just note, parallel processing feature SuperCellCyto won’t work essentially 1 sample nothing SuperCellCyto parallelise.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"i-have-more-cells-than-ram-in-my-computer","dir":"Articles","previous_headings":"","what":"I have more cells than RAM in my computer","title":"How to create supercells","text":"dataset huge constantly running RAM generating supercells? thing happens solution . Since supercells generated sample independent others can easily break process. example: Load subset samples (say 1-10). Generate supercells samples. Save output using qs package. Extract supercell_expression_matrix supercell_cell_map, export csv file using data.table’s fwrite function. Load another sets samples (say 11-20), rinse repeat step 2-4. processed samples, can load supercell_expression_matrix supercell_cell_map csv files analyse . want regenerate supercells using different gamma values, load relevant output saved using qs package relevant data (remember note output belongs sets samples!), run recomputeSupercells function.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_create_supercells.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"How to create supercells","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] parallel  stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] BiocParallel_1.36.0 SuperCellCyto_0.1.0 BiocStyle_2.30.0    #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.6-1.1      jsonlite_1.8.8      compiler_4.3.2      #>  [4] BiocManager_1.30.22 Rcpp_1.0.12         stringr_1.5.1       #>  [7] SuperCell_1.0       jquerylib_0.1.4     systemfonts_1.0.5   #> [10] textshaping_0.3.7   yaml_2.3.8          fastmap_1.1.1       #> [13] lattice_0.21-9      plyr_1.8.9          R6_2.5.1            #> [16] igraph_1.6.0        knitr_1.45          bookdown_0.37       #> [19] desc_1.4.3          bslib_0.6.1         rlang_1.1.3         #> [22] cachem_1.0.8        stringi_1.8.3       RANN_2.6.1          #> [25] xfun_0.41           fs_1.6.3            sass_0.4.8          #> [28] memoise_2.0.1       cli_3.6.2           pkgdown_2.0.7       #> [31] magrittr_2.0.3      digest_0.6.34       grid_4.3.2          #> [34] lifecycle_1.0.4     vctrs_0.6.5         evaluate_0.23       #> [37] glue_1.7.0          data.table_1.14.10  codetools_0.2-19    #> [40] ragg_1.2.7          rmarkdown_2.25      purrr_1.0.2         #> [43] pkgconfig_2.0.3     tools_4.3.2         htmltools_0.5.7"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"performing-quality-control","dir":"Articles","previous_headings":"","what":"Performing Quality Control","title":"How to Prepare Data for SuperCellCyto","text":"Prior creating supercells, ’s crucial ensure dataset undergone thorough quality control (QC). want retain single, live cells remove debris, doublets, dead cells. Additionally, also important perform compensation correct fluorescence spillover (Flow data) adjust signal overlap spillover different metal isotopse (Cytof data). well-prepared dataset key obtaining reliable supercells SuperCellCyto. Several R packages available performing QC cytometry data. Notable among PeacoQC, CATALYST, CytoExploreR. packages well maintained continuously updated. make sure information provide quickly go date, highly recommend consult packages’ respective vignettes detailed guidance use QC data. prefer using manual gating QC, can also use FlowJo. comprehensive guide using FlowJo prepare data, please read vignette. steps taken vignette QC perfectly adequate SuperCellCyto. manuscript, used CytoExploreR QC Oetjen_bcell flow cytometry data CATALYST QC Trussart_cytofruv Cytof data. specific scripts used can found Github repository: b_cell_identification/gate_flow_data.R Oetjen_bcell data. batch_correction/prepare_data.R Trussart_cytofruv data. scripts adapted used CytofRUV manuscript. Oetjen_bcell data, used following gating strategy post compensation: FSC-H FSC-isolate single events. (Also check SSC-H vs SSC-). FSC-SSC-remove debris. Live/Dead SSC-isolate live cells. following resulting single live cells manually gated Oetjen_bcell data.  completing QC process, clean data either CSV FCS file formats. next section guide load files proceed preparing data SuperCellCyto.","code":"knitr::include_graphics(\"figures/oetjen_bcell_single_live_cells.png\", error = FALSE)"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"preparing-fcscsv-files-for-supercellcyto","dir":"Articles","previous_headings":"","what":"Preparing FCS/CSV files for SuperCellCyto","title":"How to Prepare Data for SuperCellCyto","text":"use SuperCellCyto, input data must formatted data.table object. Briefly, data.table enhanced version R native data.frame object. package offers fast processing large data.frame.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"cell-id-column","dir":"Articles","previous_headings":"Preparing FCS/CSV files for SuperCellCyto","what":"Cell ID column","title":"How to Prepare Data for SuperCellCyto","text":"Additionally, cell data.table must also unique identifier. purpose ID allow SuperCell uniquely identify cell dataset. come super handy later /need work cells belong supercells, .e., need expand supercells . Generally, need create ID . dataset won’t come ID already embedded . tutorial, call column denotes cell ID cell_id. dataset, can name column however like, e.g., id, cell_identity, etc. Just make sure note column name need later create supercells.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"sample-column","dir":"Articles","previous_headings":"Preparing FCS/CSV files for SuperCellCyto","what":"Sample column","title":"How to Prepare Data for SuperCellCyto","text":"Lastly, cell data.table object must also associated sample. information must stored column later pass function creates supercells. Generally, sample typically refers biological sample cell came . create supercells, necessary column dataset. ensure supercell cells exactly one sample. cases, make sense mix cells different biological samples one supercell. Additionally (important), SuperCellCyto can process multiple samples parallel, , needs know sample information. 1 biological sample dataset? matter. still need sample column dataset. difference column 1 unique value. can name column however like, e.g., Samp, Cell_Samp, etc. tutorial, call column sample. Just make sure note column name need later create supercells.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"preparing-csv-files","dir":"Articles","previous_headings":"Preparing FCS/CSV files for SuperCellCyto","what":"Preparing CSV files","title":"How to Prepare Data for SuperCellCyto","text":"Loading CSV files data.table object straightforward. can use fread function data.table package. ’s install : example, let’s load two CSV files containing subsampled data Levine_32dim dataset used SuperCellCyto manuscript. file represents sample (H1 H2), sample name appended file name: Let’s break done: specify location csv files csv_files vector corresponding sample names samples vector. data/Levine_32dim_H1_sub.csv belongs sample H1 data/Levine_32dim_H2_sub.csv belongs sample H2. use lapply simultaneously iterate element csv_files samples vector. csv file corresponding sample, read csv file variable dat_a_sample using fread function. assign sample id new column called sample. result, get list dat containing 2 data.table objects, 1 object per csv file. use rbindlist function data.table package merge list one data.table object. create new column cell_id gives cell unique id Cell_1, Cell_2, etc.","code":"install.packages(\"data.table\") library(data.table)  csv_files <- c(\"data/Levine_32dim_H1_sub.csv\", \"data/Levine_32dim_H2_sub.csv\") samples <- c(\"H1\", \"H2\")  dat <- lapply(seq(1: length(samples)), function(i) {   csv_file <- csv_files[i]   sample <- samples[i]      dat_a_sample <- fread(csv_file)   dat_a_sample$sample <- sample      return(dat_a_sample) }) dat <- rbindlist(dat)  dat[, cell_id := paste0(\"Cell_\", seq(1: nrow(dat)))]  head(dat) #>      Time Cell_length      DNA1     DNA2   CD45RA       CD133       CD19 #> 1: 307428          27 169.91125 262.3192 2.338830 -0.15333985 -0.2056334 #> 2:  80712          13  50.91230 181.1320 2.129232  3.35638666 -0.1013980 #> 3: 111390          16 126.93545 269.4199 1.613719 -0.07193317  0.1116483 #> 4:  14088          31 142.67317 283.4645 4.100985  0.09366111 19.4974289 #> 5: 284190          53  98.28069 187.2090 4.289627  0.56254190 12.2265682 #> 6: 481997          35 112.29634 162.4416 6.089430  0.01665318 -0.1943735 #>           CD22       CD11b        CD4          CD8        CD34        Flt3 #> 1: -0.19720075 32.13040161 0.78105438 -0.071934469  1.53498471  0.84833205 #> 2:  3.05647945 14.23928833 0.53373063 -0.007943562 -0.09401329 -0.13234507 #> 3: -0.07421356  2.20701027 9.75063324 -0.034266483  0.53720337 -0.05749827 #> 4:  5.07963181 -0.07880223 0.05995781  0.009049721 -0.19206744  3.36803102 #> 5: 10.81768703  1.82670891 1.30010796 -0.187664956  2.05419374  2.72891521 #> 6:  1.43817198  5.79350042 0.64789140 54.004249573  0.28843120  1.01514077 #>           CD20    CXCR4     CD235ab     CD45       CD123     CD321        CD14 #> 1: -0.08676258 3.488938  0.82301176 313.8038  0.30909532 46.484669  0.05072345 #> 2: -0.04217101 1.364644 -0.13094166 207.2459  1.76594567 22.532978 -0.19256826 #> 3:  0.09777651 3.880993  2.00220966 750.4200 -0.06809702  9.515447 -0.05956535 #> 4:  0.64118648 2.911314 -0.08744399 169.4798  1.25776207  9.218699  1.09861076 #> 5: 15.34162998 9.303430  6.34135485 751.0563  0.05031190 10.463912  1.11993504 #> 6:  3.84020925 3.520693  2.93023992 868.4937 -0.04488884 19.107010  0.62120903 #>           CD33     CD47       CD11c          CD7      CD15        CD16 #> 1:  2.09802437 20.96871 20.76318550 -0.007966662 0.7279212 -0.03067662 #> 2:  7.35230541 27.49848 15.13398170 -0.087256350 0.7187206  0.41139653 #> 3: -0.16046160 53.51268 -0.19080050  1.044164538 2.1075230 -0.14510959 #> 4:  0.18614264 55.07846 -0.07061907  0.948859751 1.2470639  1.12294865 #> 5:  0.15872155 40.63973  4.64010382 -0.195279136 4.5712810 -0.10192144 #> 6: -0.09832545 29.65497  6.15759659 12.104630470 0.5801706 -0.11606000 #>         CD44        CD38      CD13         CD3       CD61       CD117     CD49d #> 1:  95.71002   5.1124768 5.1056433   0.5827813 -0.1684093 -0.02967962  6.557199 #> 2: 185.51929   7.4784145 0.3580886   1.8861074  1.9233229 -0.14122920  1.088500 #> 3:  33.95839   0.6161237 0.3045178 462.1258240  0.7625037 -0.03500306  5.997476 #> 4:  32.46420 249.4612885 1.2526705   0.7302832  3.2274778 -0.18526185  8.533935 #> 5:  98.09428  43.5352974 2.8327518   0.1868679  2.1032026  0.01776284 12.400333 #> 6:  65.91293   2.0126576 1.2817017 390.3737793  2.4605207  0.33154550  5.214703 #>        HLA-DR       CD64         CD41  Viability file_number event_number #> 1: 112.467545  6.9157209  0.083808646  1.7268630          94       257088 #> 2:  12.206795 30.7242870  7.753727913  3.7120194          94        80655 #> 3:  -0.046793 -0.1739236 -0.080375805  0.7011412          94       116394 #> 4:   8.965122  0.3391838 -0.005531122  0.2978864          94         5618 #> 5: 174.952667  0.4361930  1.834125400 13.2743187          94       241699 #> 6:   0.648035 -0.1803290  0.389085352  0.4543665          94       363564 #>    sample cell_id #> 1:     H1  Cell_1 #> 2:     H1  Cell_2 #> 3:     H1  Cell_3 #> 4:     H1  Cell_4 #> 5:     H1  Cell_5 #> 6:     H1  Cell_6"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"preparing-fcs-files","dir":"Articles","previous_headings":"Preparing FCS/CSV files for SuperCellCyto","what":"Preparing FCS files","title":"How to Prepare Data for SuperCellCyto","text":"FCS files, commonly used cytometry, require specific handling. Spectre package contains functions import FCS files data.table object. can install Spectre using remotes package: Let’s load two small FCS files Anti-PD1 data downloadable FlowRepository. Spectre’s read.files reads FCS files list data.table objects, one file. data.table object, also add column FileName denoting name file cell come . list useable SuperCellCyto, need merge one data.table object add sample information cell ID. can use data.table’s rbindlist function merge list one data.table object. FCS files belong two different patients, patient 9 15. shall use sample ID. make sure correctly map filenames patients, first create new data.table object containing mapping FileName sample name, using merge.data.table add data.table object. also create new column cell_id gives cell unique id Cell_1, Cell_2, etc. CSV FCS files loaded data.table objects, next step transform data appropriately SuperCellCyto.","code":"install.packages(\"remotes\") remotes::install_github(\"immunedynamics/Spectre\") library(Spectre)  dat_list <- read.files(file.loc = \"data\", file.type = \".fcs\") dat_cytof <- rbindlist(dat_list) sample_info <- data.table(   sample = c(\"patient9\", \"patient15\"),   filename = c(\"Data23_Panel3_base_NR4_Patient9\", \"Data23_Panel3_base_R5_Patient15\") ) dat_with_sample_info <- merge.data.table(   x = dat_cytof,   y = sample_info,   by.x = \"FileName\",   by.y = \"filename\" )  dat_with_sample_info[, cell_id := paste0(\"Cell_\", seq(1: nrow(dat_with_sample_info)))]"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"data-transformation","dir":"Articles","previous_headings":"","what":"Data Transformation","title":"How to Prepare Data for SuperCellCyto","text":"using SuperCellCyto, ’s essential apply appropriate data transformations. transformations crucial accurate analysis, explained article data transformation. Note: completed QC process outlined CSV files exported FlowJo, can proceed directly next vignette create supercells. details different file types (FCS, CSV scale, CSV channel value), refer guide. common method data transformation cytometry arcsinh transformation, inverse hyperbolic arcsinh transformation. transformation requires specifying cofactor, affects representation low-end data. Typically, cofactor 5 used Cytof data 150 Flow data. vignette focus transformation process rather cofactor selection. -depth information choosing cofactor, read detailed article. ’ll use Levine_32dim dataset loaded earlier CSV files. First, need select markers transformed. Usually, markers transformed SuperCellCyto. However, can choose exclude specific markers needed: transformation, ’ll use cofactor 5 apply arcsinh transformation using Spectre package. Spectre isn’t installed, use: Perform transformation: transformation, new columns “_asinh” appended indicate transformed markers. Alternatively, don’t want use Spectre, can also use inbuilt asinh function R transformation: note, use inbuilt asinh function, need re-attach cell id sample column. data now transformed, ’re ready create supercells using SuperCellCyto. Please refer create supercells vignette detailed instructions.","code":"markers_to_transform <- c(\"CD45RA\",\"CD133\",\"CD19\",\"CD22\",\"CD11b\",\"CD4\",                           \"CD8\",\"CD34\",\"Flt3\",\"CD20\",\"CXCR4\",\"CD235ab\",                           \"CD45\",\"CD123\",\"CD321\",\"CD14\",\"CD33\",\"CD47\",\"CD11c\",                           \"CD7\",\"CD15\",\"CD16\",\"CD44\",\"CD38\",\"CD13\",\"CD3\",\"CD61\",                           \"CD117\",\"CD49d\",\"HLA-DR\",\"CD64\",\"CD41\") install.packages(\"remotes\") remotes::install_github(\"immunedynamics/Spectre\") dat <- do.asinh(dat, markers_to_transform, cofactor = 5) cofactor <- 5  # Do the transformation dat_asinh <- asinh(dat[, markers_to_transform, with = FALSE] / cofactor)  head(dat_asinh) #>       CD45RA        CD133        CD19        CD22       CD11b        CD4 #> 1: 0.4521968 -0.030663164 -0.04111509 -0.03942993  2.55951176 0.15558245 #> 2: 0.4139249  0.628977340 -0.02027821  0.57848688  1.76920432 0.10654443 #> 3: 0.3173883 -0.014386137  0.02232781 -0.01484217  0.42819644 1.42110634 #> 4: 0.7483619  0.018731126  2.07004151  0.89259051 -0.01575979 0.01199128 #> 5: 0.7772642  0.112272365  1.62672741  1.51446768  0.35766705 0.25717724 #> 6: 1.0273733  0.003330631 -0.03886491  0.28380900  0.98926269 0.12921838 #>             CD8        CD34        Flt3         CD20     CXCR4     CD235ab #> 1: -0.014386398  0.30236841  0.16886275 -0.017351646 0.6508532  0.16386798 #> 2: -0.001588712 -0.01880155 -0.02646592 -0.008434102 0.2696492 -0.02618534 #> 3: -0.006853243  0.10723503 -0.01149940  0.019554056 0.7139745  0.39044561 #> 4:  0.001809943 -0.03840405  0.63090991  0.127888398 0.5535560 -0.01748791 #> 5: -0.037524184  0.40007994  0.52178220  1.839834412 1.3795382  1.05895614 #> 6:  3.074908161  0.05765429  0.20165859  0.707518206 0.6560537  0.55682438 #>        CD45        CD123    CD321        CD14        CD33     CD47       CD11c #> 1: 4.832541  0.061779758 2.925712  0.01014452  0.40817588 2.140661  2.13108274 #> 2: 4.417761  0.346230147 2.210777 -0.03850414  1.17826549 2.406005  1.82688632 #> 3: 5.704353 -0.013618983 1.399436 -0.01191279 -0.03208681 3.065803 -0.03815085 #> 4: 4.216660  0.248972250 1.371487  0.21799154  0.03721993 3.094522 -0.01412334 #> 5: 5.705201  0.010062211 1.484375  0.22215516  0.03173898 2.792218  0.82955004 #> 6: 5.850478 -0.008977647 2.050461  0.12392437 -0.01966382 2.480371  1.03599597 #>             CD7      CD15         CD16     CD44      CD38       CD13        CD3 #> 1: -0.001593332 0.1450748 -0.006135286 3.645714 0.8971911 0.89623517 0.11629394 #> 2: -0.017450384 0.1432536  0.082186751 4.307050 1.1923661 0.07155664 0.36880389 #> 3:  0.207344037 0.4099270 -0.029017846 2.614221 0.1229150 0.06086597 5.21957573 #> 4:  0.188650968 0.2468967  0.222743270 2.569725 4.6031134 0.24798459 0.14554227 #> 5: -0.039045905 0.8194260 -0.020382876 3.670287 2.8605627 0.53993131 0.03736488 #> 6:  1.617456647 0.1157753 -0.023209917 3.273479 0.3923848 0.25361287 5.05085497 #>           CD61        CD117     CD49d       HLA-DR        CD64         CD41 #> 1: -0.03367549 -0.005935889 1.0854069  3.806867702  1.12814560  0.016760944 #> 2:  0.37575938 -0.028242085 0.2160160  1.625229446  2.51531881  1.222586140 #> 3:  0.15191575 -0.007000555 1.0156499 -0.009358463 -0.03477772 -0.016074469 #> 4:  0.60744371 -0.037043896 1.3042564  1.347048087  0.06778483 -0.001106224 #> 5:  0.40913068  0.003552560 1.6398025  4.248428862  0.08712833  0.359059949 #> 6:  0.47413843  0.066260604 0.9114135  0.129246858 -0.03605798  0.077738747 dat_asinh$sample <- dat$sample dat_asinh$cell_id <- dat$cell_id  head(dat_asinh) #>       CD45RA        CD133        CD19        CD22       CD11b        CD4 #> 1: 0.4521968 -0.030663164 -0.04111509 -0.03942993  2.55951176 0.15558245 #> 2: 0.4139249  0.628977340 -0.02027821  0.57848688  1.76920432 0.10654443 #> 3: 0.3173883 -0.014386137  0.02232781 -0.01484217  0.42819644 1.42110634 #> 4: 0.7483619  0.018731126  2.07004151  0.89259051 -0.01575979 0.01199128 #> 5: 0.7772642  0.112272365  1.62672741  1.51446768  0.35766705 0.25717724 #> 6: 1.0273733  0.003330631 -0.03886491  0.28380900  0.98926269 0.12921838 #>             CD8        CD34        Flt3         CD20     CXCR4     CD235ab #> 1: -0.014386398  0.30236841  0.16886275 -0.017351646 0.6508532  0.16386798 #> 2: -0.001588712 -0.01880155 -0.02646592 -0.008434102 0.2696492 -0.02618534 #> 3: -0.006853243  0.10723503 -0.01149940  0.019554056 0.7139745  0.39044561 #> 4:  0.001809943 -0.03840405  0.63090991  0.127888398 0.5535560 -0.01748791 #> 5: -0.037524184  0.40007994  0.52178220  1.839834412 1.3795382  1.05895614 #> 6:  3.074908161  0.05765429  0.20165859  0.707518206 0.6560537  0.55682438 #>        CD45        CD123    CD321        CD14        CD33     CD47       CD11c #> 1: 4.832541  0.061779758 2.925712  0.01014452  0.40817588 2.140661  2.13108274 #> 2: 4.417761  0.346230147 2.210777 -0.03850414  1.17826549 2.406005  1.82688632 #> 3: 5.704353 -0.013618983 1.399436 -0.01191279 -0.03208681 3.065803 -0.03815085 #> 4: 4.216660  0.248972250 1.371487  0.21799154  0.03721993 3.094522 -0.01412334 #> 5: 5.705201  0.010062211 1.484375  0.22215516  0.03173898 2.792218  0.82955004 #> 6: 5.850478 -0.008977647 2.050461  0.12392437 -0.01966382 2.480371  1.03599597 #>             CD7      CD15         CD16     CD44      CD38       CD13        CD3 #> 1: -0.001593332 0.1450748 -0.006135286 3.645714 0.8971911 0.89623517 0.11629394 #> 2: -0.017450384 0.1432536  0.082186751 4.307050 1.1923661 0.07155664 0.36880389 #> 3:  0.207344037 0.4099270 -0.029017846 2.614221 0.1229150 0.06086597 5.21957573 #> 4:  0.188650968 0.2468967  0.222743270 2.569725 4.6031134 0.24798459 0.14554227 #> 5: -0.039045905 0.8194260 -0.020382876 3.670287 2.8605627 0.53993131 0.03736488 #> 6:  1.617456647 0.1157753 -0.023209917 3.273479 0.3923848 0.25361287 5.05085497 #>           CD61        CD117     CD49d       HLA-DR        CD64         CD41 #> 1: -0.03367549 -0.005935889 1.0854069  3.806867702  1.12814560  0.016760944 #> 2:  0.37575938 -0.028242085 0.2160160  1.625229446  2.51531881  1.222586140 #> 3:  0.15191575 -0.007000555 1.0156499 -0.009358463 -0.03477772 -0.016074469 #> 4:  0.60744371 -0.037043896 1.3042564  1.347048087  0.06778483 -0.001106224 #> 5:  0.40913068  0.003552560 1.6398025  4.248428862  0.08712833  0.359059949 #> 6:  0.47413843  0.066260604 0.9114135  0.129246858 -0.03605798  0.077738747 #>    sample cell_id #> 1:     H1  Cell_1 #> 2:     H1  Cell_2 #> 3:     H1  Cell_3 #> 4:     H1  Cell_4 #> 5:     H1  Cell_5 #> 6:     H1  Cell_6"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_prepare_data.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"How to Prepare Data for SuperCellCyto","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] data.table_1.14.10 #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.5       cli_3.6.2         knitr_1.45        rlang_1.1.3       #>  [5] xfun_0.41         highr_0.10        stringi_1.8.3     png_0.1-8         #>  [9] purrr_1.0.2       textshaping_0.3.7 jsonlite_1.8.8    glue_1.7.0        #> [13] htmltools_0.5.7   ragg_1.2.7        sass_0.4.8        rmarkdown_2.25    #> [17] evaluate_0.23     jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.8        #> [21] lifecycle_1.0.4   memoise_2.0.1     stringr_1.5.1     compiler_4.3.2    #> [25] fs_1.6.3          systemfonts_1.0.5 digest_0.6.34     R6_2.5.1          #> [29] magrittr_2.0.3    bslib_0.6.1       tools_4.3.2       pkgdown_2.0.7     #> [33] cachem_1.0.8      desc_1.4.3"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/using_supercellcyto_for_stratified_summarising.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Using SuperCellCyto for Stratified Summarising","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] SuperCellCyto_0.1.0 #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.6-1.1      jsonlite_1.8.8      compiler_4.3.2      #>  [4] Rcpp_1.0.12         stringr_1.5.1       parallel_4.3.2      #>  [7] SuperCell_1.0       jquerylib_0.1.4     systemfonts_1.0.5   #> [10] textshaping_0.3.7   BiocParallel_1.36.0 yaml_2.3.8          #> [13] fastmap_1.1.1       lattice_0.21-9      plyr_1.8.9          #> [16] R6_2.5.1            igraph_1.6.0        knitr_1.45          #> [19] desc_1.4.3          bslib_0.6.1         rlang_1.1.3         #> [22] cachem_1.0.8        stringi_1.8.3       RANN_2.6.1          #> [25] xfun_0.41           fs_1.6.3            sass_0.4.8          #> [28] memoise_2.0.1       cli_3.6.2           pkgdown_2.0.7       #> [31] magrittr_2.0.3      digest_0.6.34       grid_4.3.2          #> [34] lifecycle_1.0.4     vctrs_0.6.5         evaluate_0.23       #> [37] glue_1.7.0          data.table_1.14.10  codetools_0.2-19    #> [40] ragg_1.2.7          rmarkdown_2.25      purrr_1.0.2         #> [43] pkgconfig_2.0.3     tools_4.3.2         htmltools_0.5.7"},{"path":"https://phipsonlab.github.io/SuperCellCyto/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Givanna Putri. Author, maintainer. George Howitt. Author. Felix Marsh-Wakefield. Author. Thomas Ashhurst. Author. Belinda Phipson. Author.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Putri, H G, Howitt, George, Marsh-Wakefield, Felix, Ashhurst, Myles T, Phipson, Belinda (2023). “SuperCellCyto: enabling efficient analysis large scale cytometry datasets.” bioRxiv. doi:10.1101/2023.08.14.553168.","code":"@Article{,   title = {SuperCellCyto: enabling efficient analysis of large scale cytometry datasets},   author = {{Putri} and Givanna H and {Howitt} and {George} and {Marsh-Wakefield} and {Felix} and {Ashhurst} and Thomas Myles and {Phipson} and {Belinda}},   journal = {bioRxiv},   year = {2023},   doi = {https://doi.org/10.1101/2023.08.14.553168}, }"},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"supercellcyto","dir":"","previous_headings":"","what":"SuperCell For Cytometry Data","title":"SuperCell For Cytometry Data","text":"SuperCellCyto extension SuperCell R package. Initially developed scRNAseq data, SuperCell aggregates cells similar transcriptomic profiles “supercells” (also known “metacells” scRNAseq literature). SuperCellCyto, ’ve tailored SuperCell package specifically cater cytometry data: Supercells now aggregating cells similar marker expressions. Supercells now created individual sample. adaptation ensures supercell encompasses cells exclusively one sample. processing sample independently, prevent intermixing cells different samples within supercells. Multiple samples can now processed parallel custom load balancing strategy. enhancement enables simultaneous generation supercells multiple samples, significantly reducing computational time required processing large datasets.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"vignettes-and-function-documentation","dir":"","previous_headings":"","what":"Vignettes and Function Documentation","title":"SuperCell For Cytometry Data","text":"understand SuperCellCyto can integrated workflow, head Articles page. Click dropdown arrow Articles link navbar top website. vignettes provide step--step guides, practical examples, use-case scenarios demonstrate package’s application various research contexts. Documentation usage function SuperCellCyto package available Reference page. Click Reference link navbar top website.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"SuperCell For Cytometry Data","text":"use SuperCellCyto study, please kindly cite preprint bioRxiv: Putri, G. H., Howitt, G., Marsh-Wakefield, F., Ashhurst, T. M., & Phipson, B. (2023). SuperCellCyto: enabling efficient analysis large scale cytometry datasets. bioRxiv; DOI: https://doi.org/10.1101/2023.08.14.553168","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SuperCell For Cytometry Data","text":"package can installed using remotes: SuperCellCyto requires SuperCell R package installed run properly. use installation command , , theory, automatically installed. case doesn’t, please manually install running following command beforehand:","code":"# Install remotes install.packages(\"remotes\")  # Install SuperCellCyto from this repository remotes::install_github(\"phipsonlab/SuperCellCyto\") # Install SuperCell from their github repository remotes::install_github(\"GfellerLab/SuperCell\")"},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"SuperCell For Cytometry Data","text":"Please note SuperCellCyto project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"contribution-guide","dir":"","previous_headings":"","what":"Contribution guide","title":"SuperCell For Cytometry Data","text":"Please visit Contributing Guide","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompute supercells — recomputeSupercells","title":"Recompute supercells — recomputeSupercells","text":"Given supercell object, recreate supercells using different gamma value. Gamma value controls number supercells generated. smaller value, supercells get, vice versa. function run, need least run runSuperCellCyto function !","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompute supercells — recomputeSupercells","text":"","code":"recomputeSupercells(   dt,   sc_objects,   markers,   sample_colname,   cell_id_colname,   gam = 20 )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompute supercells — recomputeSupercells","text":"dt data.table object containing cytometry data rows represent cells columns represent markers. sc_objects supercell_object returned runSuperCellCyto function. markers character vector identifying markers create supercells . sample_colname character string identifying column dt denotes sample cell. cell_id_colname character string identifying column dt representing cell's unique ID. gam numeric value specifying gamma value regulates number supercells generated. Defaults 20.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recompute supercells — recomputeSupercells","text":"list following components: supercell_expression_matrix:  data.table object contains marker expression supercell. marker expressions computed calculating mean marker expressions across cells within individual supercell. supercell_cell_map: data.table maps cell corresponding supercell. table essential identifying specific supercell cell allocated . proves particularly useful analyses require one expand supercells individual cell level.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recompute supercells — recomputeSupercells","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recompute supercells — recomputeSupercells","text":"","code":"set.seed(42) cyto_dat <- simCytoData(10, rep(1000, 3)) markers <- paste0(\"Marker_\", seq_len(10)) out_gam20 <- runSuperCellCyto(     dt = cyto_dat,     markers = markers,     sample_colname = \"Sample\",     cell_id_colname = \"Cell_Id\",     gam = 20 ) recomputed_sc <- recomputeSupercells(     dt = cyto_dat,     sc_objects = out_gam20$supercell_object,     markers = markers,     sample_colname = \"Sample\",     cell_id_colname = \"Cell_Id\",     gam = 50 )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"function creates supercells cytometry data formatted data.table object using SuperCellCyto algorithm. Please make sure read additional details better understand function works.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"","code":"runSuperCellCyto(   dt,   markers,   sample_colname,   cell_id_colname,   gam = 20,   k_knn = 5,   BPPARAM = SerialParam(),   load_balancing = FALSE )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"dt data.table object containing cytometry data rows represent cells columns represent markers. data.frame object, function try convert data.table object. warning message displayed happens. Otherwise, terminate. markers character vector identifying markers create supercells . sample_colname character string identifying column dt denotes sample cell. cell_id_colname character string identifying column dt representing cell's unique ID. gam numeric value specifying gamma value regulates number supercells generated. Defaults 20. k_knn numeric value specifying k value (number neighbours) used build kNN network. Defaults 5. BPPARAM BiocParallelParam object specifying parallel processing settings. Defaults SerialParam, meaning samples processed sequentially one . Refer additional details section parallel processing details. load_balancing logical value  indicating whether use custom load balancing scheme processing multiple samples parallel. Defaults FALSE. Refer additional details section parallel processing details.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"list following components: supercell_object: list containing object returned SCimplify function. One object per sample. object critical recomputing supercells future. Hence discard . supercell_expression_matrix:  data.table object contains marker expression supercell. marker expressions computed calculating mean marker expressions across cells within individual supercell. supercell_cell_map: data.table maps cell corresponding supercell. table essential identifying specific supercell cell allocated . proves particularly useful analyses require one expand supercells individual cell level.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"parallel-processing","dir":"Reference","previous_headings":"","what":"Parallel Processing","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"SuperCellCyto can process multiple samples simultaneously parallel. can drastically bring processing time dataset large number samples. enable feature, set BPPARAM parameter either MulticoreParam object SnowParam object. Importantly, also recommended set number tasks (.e., task parameter either MulticoreParam SnowParam object) number samples dataset. Furthermore, also recommend setting load_balancing parameter TRUE. ensures optimal distribution samples across multiple cores, particularly important samples varying sizes (number cells).","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"cell-id-and-sample-definitions","dir":"Reference","previous_headings":"","what":"Cell ID and Sample Definitions","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"cell_id_colname parameter specifies column dt denotes unique identifier cell. perfectly normal column dataset default. good news trivial create one. can create new vector containing sequence numbers 1 however many cells , append vector new column dataset. Refer vignette . sample_colname parameter specifies column dt denotes sample cell came . default, SuperCellCyto creates supercells sample independent samples. ensures supercell contain cells exactly one sample. constitute sample? purposes, sample represents biological sample experiment. may thinking, possible use different context, say creating supercells population cluster rather biological sample? short answer yes, address vignette.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"computing-pca","dir":"Reference","previous_headings":"","what":"Computing PCA","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"function start computing PCA markers specified markers parameter. default, number PCs calculated set 10. less 10 markers markers parameter, number PCs set however many markers markers parameter. Notably, scaling transformation done markers' expressions prior computing PCs. function use irlba calculate PCA. little gain use cytometry data relatively tiny number features (markers) data.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"setting-supercell-s-resolution","dir":"Reference","previous_headings":"","what":"Setting Supercell's Resolution","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"gam parameter influences number supercells created per sample. lower gam value results , thus generally smaller supercells, vice versa. estimate many supercells get dataset, important understand gam value interpreted context number cells sample. gam=n_cells/n_supercells n_cells denotes number cells n_supercells denotes number supercells created. resolving formula , can roughly estimate many supercells get per sample. example, say 2 samples, sample B. Sample 10,000 cells, sample B 5,000 cells: gam set 10, end 1,000 supercells sample 500 supercells sample B, total 1,500 supercells. gam set 50, end 200 supercells sample 100 supercells sample B, total 300 supercells. Importantly, one expect supercells size. capture /less cells others. trivial estimate many cells captured supercell beforehand.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"computing-knn-network","dir":"Reference","previous_headings":"","what":"Computing kNN network","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"create supercells, kNN (k-Nearest Neighbors) network constructed based k_knn parameter dictates number neighbours (cell) used create network. actual (approximate) kNN network created. walktrap algorithm uses network group cells supercells.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"","code":"# Simulate some data set.seed(42) cyto_dat <- simCytoData(nmarkers = 10, ncells = rep(2000,2))  # Setup the columns designating the markers, samples, and cell IDs marker_col <- paste0(\"Marker_\", seq_len(10)) sample_col <- \"Sample\" cell_id_col <- \"Cell_Id\"  supercell_dat <- runSuperCellCyto(     cyto_dat, marker_col,     sample_col, cell_id_col )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate cytometry data — simCytoData","title":"Simulate cytometry data — simCytoData","text":"Simulate cytometry data use testing documenting functions require cytometry data. Please run set.seed running function want ensure reproducibility.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate cytometry data — simCytoData","text":"","code":"simCytoData(nmarkers = 10, ncells = rep(10000, 2))"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate cytometry data — simCytoData","text":"nmarkers numeric value specifying number markers simulate. ncells numeric vector specifying number cells simulate per sample. 1 vector element per sample.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate cytometry data — simCytoData","text":"data.table object containing simulated cytometry data rows represent cells columns represent markers.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate cytometry data — simCytoData","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate cytometry data — simCytoData","text":"","code":"set.seed(42) cyto_dat <- simCytoData() head(cyto_dat) #>    Marker_1 Marker_2  Marker_3 Marker_4 Marker_5 Marker_6 Marker_7 Marker_8 #> 1: 18.61597 17.43348  9.213419 18.40881 13.68860 12.77402 15.24751 7.140615 #> 2: 20.23361 19.82792  9.740510 18.16383 13.97108 14.25898 16.05032 5.863752 #> 3: 18.62743 17.76816 11.175358 18.59606 16.08534 13.69734 16.71550 4.750240 #> 4: 20.74051 19.94771  9.797939 18.43590 13.92092 12.64266 15.55953 8.173464 #> 5: 18.65938 18.87830  8.916928 17.83295 15.62066 11.37118 16.08417 6.664707 #> 6: 20.02696 20.76054  9.262685 16.89373 15.92339 13.40002 16.13880 6.862717 #>    Marker_9 Marker_10   Sample Cell_Id #> 1: 14.37555  14.18484 Sample_1  Cell_1 #> 2: 15.58007  15.56981 Sample_1  Cell_2 #> 3: 14.16156  14.92222 Sample_1  Cell_3 #> 4: 14.26637  15.10761 Sample_1  Cell_4 #> 5: 15.12219  15.64231 Sample_1  Cell_5 #> 6: 15.85313  15.52535 Sample_1  Cell_6 dim(cyto_dat) #> [1] 20000    12"},{"path":"https://phipsonlab.github.io/SuperCellCyto/news/index.html","id":"supercellcyto-010","dir":"Changelog","previous_headings":"","what":"SuperCellCyto 0.1.0","title":"SuperCellCyto 0.1.0","text":"first release SuperCellCyto. also version SuperCellCyto used preprint:","code":"@article{     putri2023supercellcyto,     title={SuperCellCyto: enabling efficient analysis of large scale cytometry datasets},     author={Putri, Givanna H and Howitt, George and Marsh-Wakefield, Felix and Ashhurst, Thomas Myles and Phipson, Belinda},     journal={bioRxiv},     pages={2023--08},     year={2023},     publisher={Cold Spring Harbor Laboratory} }"}]
