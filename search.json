[{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to create supercells","text":"vignette describes steps reduce size vast high-dimensional cytometry data using SuperCellCyto, R package based SuperCell R package David Gfeller lab University Lausanne. Please note ’re still actively updating vignette (fact package ), welcome feedbacks improve . myriad ways use SuperCell. try cover many use cases possible, bound miss something. case, please reach github repository creating Github issue.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"How to create supercells","text":"install SuprCellCyto, need use devtools package CRAN. can install devtools using install.packages(\"devtools\") command. Thereafter, can install SuperCellCyto using devtools::install_github(\"phipsonlab/SuperCellCyto\"). SuperCellCyto requires SuperCell R package installed run properly. use devtools::install_github command install SuperCellCyto, , theory, automatically installed. case doesn’t, can manually install using devtools::install_github(\"GfellerLab/SuperCell\").","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"preparing-your-dataset","dir":"Articles","previous_headings":"","what":"Preparing your dataset","title":"How to create supercells","text":"function creates supercells called runSuperCellCyto, operates data.table object, enhanced version R native data.frame. may add support SummarizedExperiment flowFrame object future enough demands . raw data stored csv file, can import data.table object using fread function. raw data stored across multiple csv files FCS files (common cytometry), need help Spectre R package import adata.table object. Specifically, need : Run read.files function read FCS csv files. Run .merge.files merge resulting data.table objects one. unsure steps work , look example Spectre vignette. Using vignette , csv files, can run steps vignette , changing InputDirectory variable. FCS files, need change file.type parameter read.files function .fcs. vignette, simulate toy data using simCytoData function. several things note dataset. Let’s go one one sub-section .","code":"n_markers <- 15 n_samples <- 3 dat <- SuperCellCyto::simCytoData(nmarkers = n_markers, ncells = rep(10000, n_samples)) head(dat) #>     Marker_1 Marker_2 Marker_3 Marker_4 Marker_5 Marker_6 Marker_7 Marker_8 #> 1: 10.694825 18.05815 18.62097 19.21325 17.47048 15.67696 10.48774 20.67234 #> 2:  9.504270 17.70526 16.79722 18.91008 16.51588 16.74493 11.28869 19.99659 #> 3:  9.187596 18.27145 19.65988 19.79024 17.70131 14.94085 10.16797 19.38430 #> 4:  8.381303 17.71791 16.82802 20.66024 16.91027 15.62837 11.08719 19.03197 #> 5:  8.113918 16.32809 17.82791 22.56302 16.03442 14.17356 10.62620 19.85998 #> 6:  8.309174 16.72659 17.26222 19.87672 16.15224 16.05604 12.93817 18.28405 #>    Marker_9 Marker_10 Marker_11 Marker_12 Marker_13 Marker_14 Marker_15 #> 1: 15.44165  10.54742  15.66111  15.05300 11.981593  8.388768  7.775148 #> 2: 16.60574  12.37226  15.49304  16.34465  9.781065 10.523606  6.774530 #> 3: 16.29639  11.51029  15.25142  16.99951 12.498862 10.241395  8.952238 #> 4: 14.90154  11.50771  15.00316  18.03590 10.432750  9.519525  8.037813 #> 5: 15.25961  12.25575  15.07579  17.57087 10.319984  9.263645  8.461470 #> 6: 12.19801  10.29596  15.32941  18.40051 12.664165  9.550939  6.640555 #>      Sample Cell_Id #> 1: Sample_1  Cell_1 #> 2: Sample_1  Cell_2 #> 3: Sample_1  Cell_3 #> 4: Sample_1  Cell_4 #> 5: Sample_1  Cell_5 #> 6: Sample_1  Cell_6"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"the-markers","dir":"Articles","previous_headings":"Preparing your dataset","what":"The markers","title":"How to create supercells","text":"runSuperCellCyto function perform data transformation scaling. Thus, must ensure dataset already appropriately transformed using either arc-sinh transformation linear binning (using FlowJo). tutorial explains data transformation process great detail: (https://wiki.centenary.org.au/display/SPECTRE/Data+transformation). Please read unsure transform data. toy dataset, transform data using arc-sinh transformation implementation provided base R asinh function: Breaking steps, : Identify columns denoting markers. Set co-factor 5. transformation store dat_asinh variable. Set dat_asinh column name reflect values column (marker) haas undergone arc-sinh transformation. Combine dat dat_asinh using cbind.","code":"# Specify which columns are the markers to transform marker_cols <- paste0(\"Marker_\", seq_len(n_markers)) # The co-factor for arc-sinh cofactor <- 5  # Do the transformation dat_asinh <- asinh(dat[, marker_cols, with = FALSE] / cofactor)  # Rename the new columns marker_cols_asinh <- paste0(marker_cols, \"_asinh\") names(dat_asinh) <- marker_cols_asinh  # Add them our previously loaded data dat <- cbind(dat, dat_asinh)  head(dat[, marker_cols_asinh, with = FALSE]) #>    Marker_1_asinh Marker_2_asinh Marker_3_asinh Marker_4_asinh Marker_5_asinh #> 1:       1.504110       1.995944       2.025554       2.055826       1.964098 #> 2:       1.398396       1.976938       1.926372       2.040441       1.910195 #> 3:       1.368518       2.007265       2.078081       2.084487       1.976723 #> 4:       1.288721       1.977625       1.928128       2.126251       1.932803 #> 5:       1.260997       1.899255       1.983583       2.212078       1.881915 #> 6:       1.281307       1.922335       1.952573       2.088715       1.888907 #>    Marker_6_asinh Marker_7_asinh Marker_8_asinh Marker_9_asinh Marker_10_asinh #> 1:       1.860413       1.486428       2.126820       1.846015        1.491553 #> 2:       1.923384       1.553296       2.094547       1.915389        1.637701 #> 3:       1.814699       1.458559       2.064406       1.897397        1.571099 #> 4:       1.857456       1.536853       2.046654       1.812201        1.570893 #> 5:       1.764840       1.498282       2.087898       1.834739        1.628934 #> 6:       1.883201       1.679295       2.007930       1.624563        1.469798 #>    Marker_11_asinh Marker_12_asinh Marker_13_asinh Marker_14_asinh #> 1:        1.859450        1.821793        1.608021        1.289486 #> 2:        1.849177        1.900224        1.423880        1.489511 #> 3:        1.834229        1.937852        1.647147        1.465020 #> 4:        1.818646        1.994756        1.481685        1.399816 #> 5:        1.823229        1.969607        1.471895        1.375765 #> 6:        1.839077        2.014056        1.659356        1.402733 #>    Marker_15_asinh #> 1:        1.224906 #> 2:        1.111489 #> 3:        1.345792 #> 4:        1.252985 #> 5:        1.296907 #> 6:        1.095475"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"cell-id-column","dir":"Articles","previous_headings":"Preparing your dataset","what":"Cell id column","title":"How to create supercells","text":"create supercell, must provide column uniquely identify cell, akin Cell_Id column toy data generated : purpose cell id allow SuperCell uniquely identify cell dataset. ID come super handy later /need work cells belong supercells. Generally, need create ID . dataset won’t come ID already embedded . simple cell id can made concatenating word Cell row number. Something like following: , store cell id column called Cell_id_dummy. values Cell_1, Cell_2, way Cell_x x number cells dataset. Note, can name cell id column however like, id, cell_identity, etc. Importantly, need make sure note column name need pass runSuperCellCyto function later.","code":"head(dat$Cell_Id, n = 10) #>  [1] \"Cell_1\"  \"Cell_2\"  \"Cell_3\"  \"Cell_4\"  \"Cell_5\"  \"Cell_6\"  \"Cell_7\"  #>  [8] \"Cell_8\"  \"Cell_9\"  \"Cell_10\" dat$Cell_id_dummy <- paste0(\"Cell_\", seq_len(nrow(dat))) head(dat$Cell_id_dummy, n = 10) #>  [1] \"Cell_1\"  \"Cell_2\"  \"Cell_3\"  \"Cell_4\"  \"Cell_5\"  \"Cell_6\"  \"Cell_7\"  #>  [8] \"Cell_8\"  \"Cell_9\"  \"Cell_10\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"sample-column","dir":"Articles","previous_headings":"Preparing your dataset","what":"Sample column","title":"How to create supercells","text":"notice toy data , column called Sample. default, column refers biological sample cells come . toy data , 3 samples, Sample_1, Sample_2, Sample_3: 10,000 cells per sample: create supercells, necessary Sample column dataset. can name column however like, Samp, Cell_Samp. However, make sure note column name need pass runSuperCellCyto function. [Creating supercells][#creating-supercells] section. 1 biological sample dataset? matter. still need column dataset, pass column name runSuperCellCyto function. difference column 1 unique value. need ? ensure supercell contains cells exactly 1 sample. , general, make sense mix cells different biological samples one supercell. Additionally (important), runSuperCellCyto function can process samples parallel set BPPARAM parameter BiocParallelParam class leverage parallel processing. Running runSuperCellCyto parallel section . However, want supercell contain cells different biological samples, need create new Sample column containing exactly 1 unique value, pass column name runSuperCellCyto function. : may wonder whether possible use SuperCellCyto reduce number cells captured cluster (cell type) can make UMAP/tSNE plot crowded? Commonly cytometry, use stratified sampling subsample clusters drawing UMAP/tSNE plot avoid overcrowding . short answer , yes can. See Using runSuperCellCyto stratified summarising section information.","code":"unique(dat$Sample) #> [1] \"Sample_1\" \"Sample_2\" \"Sample_3\" table(dat$Sample) #>  #> Sample_1 Sample_2 Sample_3  #>    10000    10000    10000"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"creating-supercells","dir":"Articles","previous_headings":"","what":"Creating supercells","title":"How to create supercells","text":"Now imported data, let’s create supercells. First, let’s store markers, sample, cell id column variables: pass , together dataset runSuperCellCyto function create supercells: Now let’s dig deeper object created: list containing 3 elements:","code":"markers_col <- paste0(\"Marker_\", seq_len(n_markers), \"_asinh\") sample_col <- \"Sample\" cell_id_col <- \"Cell_Id_dummy\" supercells <- runSuperCellCyto(   dt = dat,   markers = markers_col,   sample_colname = sample_col,   cell_id_colname = cell_id_col ) #> Warning in SCimplify(X = mt, genes.use = rownames(mt), do.scale = FALSE, : colnames(X) is Null,  #> Gene expression matrix X is expected to have cellIDs as colnames!  #> CellIDs will be created automatically in a form 'cell_i'  #> Warning in SCimplify(X = mt, genes.use = rownames(mt), do.scale = FALSE, : colnames(X) is Null,  #> Gene expression matrix X is expected to have cellIDs as colnames!  #> CellIDs will be created automatically in a form 'cell_i'  #> Warning in SCimplify(X = mt, genes.use = rownames(mt), do.scale = FALSE, : colnames(X) is Null,  #> Gene expression matrix X is expected to have cellIDs as colnames!  #> CellIDs will be created automatically in a form 'cell_i' class(supercells) #> [1] \"list\" names(supercells) #> [1] \"supercell_expression_matrix\" \"supercell_cell_map\"          #> [3] \"supercell_object\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercell-object","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell object","title":"How to create supercells","text":"supercell_object contains metadata used create supercells. list, element contains metadata used create supercells sample. come handy need debug supercells later line.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercell-expression-matrix","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell expression matrix","title":"How to create supercells","text":"supercell_expression_matrix contains marker expression supercell. calculated taking average marker expression cells contained within supercell. Therein, following columns: markers previously specified markers_col variable. column (Sample case) denoting sample supercell belongs , (note column name stored sample_col variable). SuperCellId column denoting unique ID supercell.","code":"head(supercells$supercell_expression_matrix) #>    Marker_1_asinh Marker_2_asinh Marker_3_asinh Marker_4_asinh Marker_5_asinh #> 1:       1.425460       1.968165       1.996906       2.078876       1.965225 #> 2:       1.353603       1.983327       1.982501       2.097944       1.929855 #> 3:       1.559381       1.954420       1.972512       2.069726       1.932380 #> 4:       1.440651       1.975797       1.964673       2.091701       1.959070 #> 5:       1.425177       1.960476       1.988871       2.083322       1.940751 #> 6:       1.436589       1.948096       1.989251       2.071977       1.939811 #>    Marker_6_asinh Marker_7_asinh Marker_8_asinh Marker_9_asinh Marker_10_asinh #> 1:       1.823934       1.533029       2.058700       1.839849        1.585631 #> 2:       1.902672       1.518262       2.045348       1.872472        1.572385 #> 3:       1.786992       1.536787       2.043599       1.858880        1.615740 #> 4:       1.817760       1.620648       2.064173       1.889552        1.556290 #> 5:       1.842199       1.680253       2.058626       1.851076        1.464338 #> 6:       1.845452       1.629363       2.045897       1.884395        1.505068 #>    Marker_11_asinh Marker_12_asinh Marker_13_asinh Marker_14_asinh #> 1:        1.884628        1.918736        1.640965        1.336018 #> 2:        1.866175        1.884812        1.645131        1.271799 #> 3:        1.840844        1.912627        1.582698        1.336074 #> 4:        1.919457        1.948982        1.560613        1.363933 #> 5:        1.861980        1.938625        1.597382        1.270763 #> 6:        1.838122        1.917415        1.699773        1.377068 #>    Marker_15_asinh   Sample                 SuperCellId #> 1:        1.083020 Sample_1 SuperCell_1_Sample_Sample_1 #> 2:        1.225969 Sample_1 SuperCell_2_Sample_Sample_1 #> 3:        1.330874 Sample_1 SuperCell_3_Sample_Sample_1 #> 4:        1.218253 Sample_1 SuperCell_4_Sample_Sample_1 #> 5:        1.214281 Sample_1 SuperCell_5_Sample_Sample_1 #> 6:        1.191210 Sample_1 SuperCell_6_Sample_Sample_1 names(supercells$supercell_expression_matrix) #>  [1] \"Marker_1_asinh\"  \"Marker_2_asinh\"  \"Marker_3_asinh\"  \"Marker_4_asinh\"  #>  [5] \"Marker_5_asinh\"  \"Marker_6_asinh\"  \"Marker_7_asinh\"  \"Marker_8_asinh\"  #>  [9] \"Marker_9_asinh\"  \"Marker_10_asinh\" \"Marker_11_asinh\" \"Marker_12_asinh\" #> [13] \"Marker_13_asinh\" \"Marker_14_asinh\" \"Marker_15_asinh\" \"Sample\"          #> [17] \"SuperCellId\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercellid","dir":"Articles","previous_headings":"Creating supercells > Supercell expression matrix","what":"SuperCellId","title":"How to create supercells","text":"Let’s look SuperCellId: Let’s break one , SuperCell_1_Sample_Sample_1. SuperCell_1 numbering (1 however many supercells sample) used uniquely identify supercell sample. Notably, may encounter (SuperCell_1, SuperCell_2) repeated across different samples, e.g., 3 supercells’ id pre-fixed SuperCell_1, make equal one another! SuperCell_1_Sample_Sample_1 contain cells Sample_1 SuperCell_1_Sample_Sample_2 contain cells Sample_2. now, may noticed appended sample name supercell id. aids differentiating supercells different samples.","code":"head(unique(supercells$supercell_expression_matrix$SuperCellId)) #> [1] \"SuperCell_1_Sample_Sample_1\" \"SuperCell_2_Sample_Sample_1\" #> [3] \"SuperCell_3_Sample_Sample_1\" \"SuperCell_4_Sample_Sample_1\" #> [5] \"SuperCell_5_Sample_Sample_1\" \"SuperCell_6_Sample_Sample_1\" supercell_ids <- unique(supercells$supercell_expression_matrix$SuperCellId) supercell_ids[grep(\"SuperCell_1_\", supercell_ids)] #> [1] \"SuperCell_1_Sample_Sample_1\" \"SuperCell_1_Sample_Sample_2\" #> [3] \"SuperCell_1_Sample_Sample_3\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercell-cell-map","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell cell map","title":"How to create supercells","text":"supercell_cell_map maps cell dataset supercell belongs . map useful later need expand supercells . Additionally, also reason need column dataset uniquely identify cell.","code":"head(supercells$supercell_cell_map) #>                      SuperCellID   Sample #> 1: SuperCell_132_Sample_Sample_1 Sample_1 #> 2:   SuperCell_7_Sample_Sample_1 Sample_1 #> 3:  SuperCell_39_Sample_Sample_1 Sample_1 #> 4: SuperCell_256_Sample_Sample_1 Sample_1 #> 5: SuperCell_256_Sample_Sample_1 Sample_1 #> 6:  SuperCell_87_Sample_Sample_1 Sample_1"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"running-runsupercellcyto-in-parallel","dir":"Articles","previous_headings":"","what":"Running runSuperCellCyto in parallel","title":"How to create supercells","text":"default, runSuperCellCyto process sample one . sample processed independent one another, can process parallel. , need create BiocParallelParam object leverages parallel processing. Additionally, also set number tasks number samples, set load_balancing parameter TRUE jobs supercelling large samples assigned small samples (instead given supercelling smaller samples). Notably, set workers total number cores computer, render computer useless anything else (might blow RAM). find total number cores computer, can use parallel’s detectCores.","code":"n_cores <- detectCores() supercell_par <- runSuperCellCyto(   dt = dat,   markers = markers_col,   sample_colname = sample_col,   cell_id_colname = cell_id_col,   BPPARAM = MulticoreParam(     workers = n_cores - 1,     tasks = n_samples   ),   load_balancing = TRUE )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"controlling-the-supercells-granularity","dir":"Articles","previous_headings":"","what":"Controlling the supercells’ granularity","title":"How to create supercells","text":"described runSuperCellCyto function’s documentation, let’s briefly go . runSuperCellCyto function equipped various parameters can customise alter composition supercells. one likely used gam parameter. gam parameter controls many supercells generate, indirectly, many cells captured within supercell. parameter resolved following formula gam=n_cells/n_supercells n_cell denotes number cells n_supercells denotes number supercells. general, larger gam parameter set , less supercells get. Say instance 10,000 cells. gam set 10, end 1,000 supercells, whereas gam set 50, end 200 supercells. may noticed, reading sections , runSuperCellCyto ran sample independent , can set 1 value gam parameter. Indeed, now, gam value used across samples, depending many cells sample, end different number supercells sample. instance, say 10,000 cells sample 1, 100,000 cells sample 2. gam set 10, sample 1, get 1,000 supercells (10,000/10) sample 2, get 10,000 supercells (100,000/10). future, may add ability specify different gam value different samples. now, want , need break data multiple data.table objects, containing data 1 sample, run runSuperCellCyto function different gam parameter value. Something like following: Subsequently, extract combine supercell_expression_matrix supercell_cell_map, need use rbind:","code":"n_markers <- 10 dat <- simCytoData(nmarkers = n_markers) markers_col <- paste0(\"Marker_\", seq_len(n_markers)) sample_col <- \"Sample\" cell_id_col <- \"Cell_Id\"  samples <- unique(dat[[sample_col]]) gam_values <- c(10, 20, 10)  supercells_diff_gam <- lapply(seq_len(length(samples)), function(i) {   sample <- samples[i]   gam <- gam_values[i]   dat_samp <- dat[dat$Sample == sample, ]   supercell_samp <- runSuperCellCyto(     dt = dat_samp,     markers = markers_col,     sample_colname = sample_col,     cell_id_colname = cell_id_col,     gam = gam   )   return(supercell_samp) }) supercell_expression_matrix <- do.call(   \"rbind\", lapply(supercells_diff_gam, function(x) x[[\"supercell_expression_matrix\"]]) )  supercell_cell_map <- do.call(   \"rbind\", lapply(supercells_diff_gam, function(x) x[[\"supercell_cell_map\"]]) ) rbind(head(supercell_expression_matrix, n = 3), tail(supercell_expression_matrix, n = 3)) #>    Marker_1  Marker_2  Marker_3 Marker_4 Marker_5 Marker_6  Marker_7  Marker_8 #> 1: 19.08567  5.378430  7.475404 13.20373 12.95155 14.96959  6.450761 12.772883 #> 2: 18.14156  5.303348  7.483026 11.76595 14.46152 13.96995  5.999599 13.874374 #> 3: 18.62640  5.224204  6.967644 12.63991 13.71962 13.77920  7.016021 13.357391 #> 4: 14.42017  9.332069 12.615601 13.59905 18.60601 16.24145 14.135111  9.750422 #> 5: 14.96964 11.510417 11.894626 14.40913 20.55192 15.64620 13.396529 10.706130 #> 6: 15.78741 10.606289 12.932924 13.27086 19.27002 18.01929 12.535962 12.657384 #>    Marker_9 Marker_10   Sample                   SuperCellId #> 1: 14.04731  19.02549 Sample_1   SuperCell_1_Sample_Sample_1 #> 2: 14.43260  20.11493 Sample_1   SuperCell_2_Sample_Sample_1 #> 3: 15.11225  18.97070 Sample_1   SuperCell_3_Sample_Sample_1 #> 4: 14.68925  16.96106 Sample_2 SuperCell_498_Sample_Sample_2 #> 5: 14.35096  16.61905 Sample_2 SuperCell_499_Sample_Sample_2 #> 6: 16.45199  19.88460 Sample_2 SuperCell_500_Sample_Sample_2 rbind(head(supercell_cell_map, n = 3), tail(supercell_cell_map, n = 3)) #>                      SuperCellID     CellId   Sample #> 1:  SuperCell_91_Sample_Sample_1     Cell_1 Sample_1 #> 2: SuperCell_736_Sample_Sample_1     Cell_2 Sample_1 #> 3:  SuperCell_45_Sample_Sample_1     Cell_3 Sample_1 #> 4: SuperCell_238_Sample_Sample_2 Cell_19998 Sample_2 #> 5:  SuperCell_39_Sample_Sample_2 Cell_19999 Sample_2 #> 6: SuperCell_177_Sample_Sample_2 Cell_20000 Sample_2"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"using-runsupercellcyto-for-stratified-summarising","dir":"Articles","previous_headings":"","what":"Using runSuperCellCyto for stratified summarising","title":"How to create supercells","text":"previously mentioned, can use runSuperCellCyto perform stratified summarising, .e., summarise (well, meaningfully sub-sample) cluster cell type. , need change sample column denotes cell type cluster cell belongs . example, let’s first cluster toy data k-means: perform stratified summarising, supply cluster column (kmeans_clusters example ), runSuperCellCyto’s sample_colname parameter. Now, look supercell_expression_matrix, row (supercell) denoted cluster belongs , biological sample came : look number supercells created check many cells cluster, find , cluster, get approximately n_cells/20 20 gam parameter value used runSuperCellCyto (default).","code":"set.seed(42)  # Simulate some data dat <- simCytoData() markers_col <- paste0(\"Marker_\", seq_len(10)) cell_id_col <- \"Cell_Id\"  # Run kmeans clust <- kmeans(   x = dat[, markers_col, with = FALSE],   centers = 5 )  clust_col <- \"kmeans_clusters\" dat[[clust_col]] <- paste0(\"cluster_\", clust$cluster) supercells <- runSuperCellCyto(   dt = dat,   markers = markers_col,   sample_colname = clust_col,   cell_id_colname = cell_id_col ) # Inspect the top 3 and bottom 3 of the expression matrix and some columns. rbind(   head(supercells$supercell_expression_matrix, n = 3),   tail(supercells$supercell_expression_matrix, n = 3) )[, c(\"kmeans_clusters\", \"SuperCellId\", \"Marker_10\")] #>    kmeans_clusters                    SuperCellId Marker_10 #> 1:       cluster_4   SuperCell_1_Sample_cluster_4  14.64662 #> 2:       cluster_4   SuperCell_2_Sample_cluster_4  14.66858 #> 3:       cluster_4   SuperCell_3_Sample_cluster_4  14.41837 #> 4:       cluster_5 SuperCell_498_Sample_cluster_5  16.99003 #> 5:       cluster_5 SuperCell_499_Sample_cluster_5  17.09864 #> 6:       cluster_5 SuperCell_500_Sample_cluster_5  15.85447 # Compute how many cells per cluster, and divide by 20, the gamma value. table(dat$kmeans_clusters) / 20 #>  #> cluster_1 cluster_2 cluster_3 cluster_4 cluster_5  #>    120.25    130.30    119.75    129.70    500.00 table(supercells$supercell_expression_matrix$kmeans_clusters) #>  #> cluster_1 cluster_2 cluster_3 cluster_4 cluster_5  #>       120       130       120       130       500"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"How to create supercells","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] parallel  stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] BiocParallel_1.34.2  SuperCellCyto_0.99.0 BiocStyle_2.28.1     #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.6-1.1      jsonlite_1.8.7      compiler_4.3.2      #>  [4] BiocManager_1.30.22 Rcpp_1.0.11         stringr_1.5.1       #>  [7] SuperCell_1.0       jquerylib_0.1.4     systemfonts_1.0.5   #> [10] textshaping_0.3.7   yaml_2.3.7          fastmap_1.1.1       #> [13] lattice_0.21-9      plyr_1.8.9          R6_2.5.1            #> [16] igraph_1.5.1        knitr_1.45          bookdown_0.37       #> [19] desc_1.4.2          rprojroot_2.0.4     bslib_0.6.1         #> [22] rlang_1.1.2         cachem_1.0.8        stringi_1.8.2       #> [25] RANN_2.6.1          xfun_0.41           fs_1.6.3            #> [28] sass_0.4.7          memoise_2.0.1       cli_3.6.1           #> [31] pkgdown_2.0.7       magrittr_2.0.3      digest_0.6.33       #> [34] grid_4.3.2          lifecycle_1.0.4     vctrs_0.6.5         #> [37] evaluate_0.23       glue_1.6.2          data.table_1.14.8   #> [40] codetools_0.2-19    ragg_1.2.6          rmarkdown_2.25      #> [43] purrr_1.0.2         pkgconfig_2.0.3     tools_4.3.2         #> [46] htmltools_0.5.7"},{"path":"https://phipsonlab.github.io/SuperCellCyto/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Givanna Putri. Author, maintainer. Belinda Phipson. Author.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Putri G, Phipson B (2023). SuperCellCyto: SuperCell Cytometry Data. R package version 0.99.0, https://phipsonlab.github.io/SuperCellCyto/.","code":"@Manual{,   title = {SuperCellCyto: SuperCell For Cytometry Data},   author = {Givanna Putri and Belinda Phipson},   year = {2023},   note = {R package version 0.99.0},   url = {https://phipsonlab.github.io/SuperCellCyto/}, }"},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"supercellcyto","dir":"","previous_headings":"","what":"SuperCell For Cytometry Data","title":"SuperCell For Cytometry Data","text":"SuperCellCyto extension SuperCell R package. Initially developed scRNAseq data, SuperCell aggregates cells similar transcriptomic profiles “supercells” (also known “metacells” scRNAseq literature). SuperCellCyto, adapted SuperCell package specifically cytometry data implemented within-sample supercell creation, preventing supercells containing cells across multiple samples. Additionally, also introduced parallel processing capabilities using careful load balancing strategy, allowing simultaneous creation supercells across multiple samples, significantly speeds computational time.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"SuperCell For Cytometry Data","text":"use SuperCellCyto study, please kindly cite preprint bioRxiv: Putri, G. H., Howitt, G., Marsh-Wakefield, F., Ashhurst, T. M., & Phipson, B. (2023). SuperCellCyto: enabling efficient analysis large scale cytometry datasets. bioRxiv; DOI: https://doi.org/10.1101/2023.08.14.553168","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SuperCell For Cytometry Data","text":"package can installed using devtools: SuperCellCyto requires SuperCell R package installed run properly. use installation command , , theory, automatically installed. case doesn’t, please manually install running following command beforehand:","code":"# Install devtools install.packages(\"devtools\")  # Install SuperCellCyto from this repository devtools::install_github(\"phipsonlab/SuperCellCyto\") # Install SuperCell from their github repository devtools::install_github(\"GfellerLab/SuperCell\")"},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"SuperCell For Cytometry Data","text":"welcome contributions! Please submit Github issue run issues questions use SuperCellCyto. Want suggest improvements? Kindly open Github issue submit pull request referencing issue.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompute supercells — recomputeSupercells","title":"Recompute supercells — recomputeSupercells","text":"Given supercell object, recompute supercell granularity using different gamma value. Gamma value controls number supercells generated. smaller value, supercells get, vice versa.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompute supercells — recomputeSupercells","text":"","code":"recomputeSupercells(   dt,   sc_objects,   markers,   sample_colname,   cell_id_colname,   gam = 20 )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompute supercells — recomputeSupercells","text":"dt data.table object containing cytometry data. Rows represent cells, columns represent markers. data.table object, function warn , try convert data.table object. sc_objects supercell_object returned runSuperCellCyto function. markers character vector specifying markers dt. sample_colname character specifying column dt denotes sample cell. cell_id_colname character specifying column dt denotes unique ID cell. gam numeric specifying gamma value used SuperCell.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recompute supercells — recomputeSupercells","text":"list following components: supercell_expression_matrix: data.table containing marker expression supercells. computed taking average marker expression cells captured supercell. supercell_cell_map: data.table showing cell captured supercell. useful intend work supercell captures cell.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recompute supercells — recomputeSupercells","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recompute supercells — recomputeSupercells","text":"","code":"set.seed(42) cyto_dat <- simCytoData(10, rep(1000, 3)) markers <- paste0(\"Marker_\", seq_len(10)) out_gam20 <- runSuperCellCyto(     dt = cyto_dat,     markers = markers,     sample_colname = \"Sample\",     cell_id_colname = \"Cell_Id\",     gam = 20 ) recomputed_sc <- recomputeSupercells(     dt = cyto_dat,     sc_objects = out_gam20$supercell_object,     markers = markers,     sample_colname = \"Sample\",     cell_id_colname = \"Cell_Id\",     gam = 50 )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SuperCell for cytometry data — runSuperCellCyto","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"Run SuperCell cytometry data stored data.table object. wrapper function around SCImplify function SuperCell R package Bilous et.al, 2022. enhanced adding capacity \"supercell\" multiple samples parallel use BiocParallel, adding support \"supercell\" cytometry data. explanations given various sections , expanded vignette.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"","code":"runSuperCellCyto(   dt,   markers,   sample_colname,   cell_id_colname,   gam = 20,   k_knn = 5,   BPPARAM = SerialParam(),   load_balancing = FALSE )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"dt data.table object containing cytometry data. Rows represent cells, columns represent markers. data.table object, function warn , try convert data.table object. markers character vector specifying markers run SuperCell . sample_colname character specifying column dt denotes sample cell. cell_id_colname character specifying column dt denotes unique ID cell. gam numeric specifying gamma value used SuperCell. Default 20. k_knn numeric specifying k value used SuperCell's knn. Default 5. BPPARAM BiocParallelParam specifying samples \"supercelled\" parallel. Default SerialParam, meaning samples processed serial. Please go section parallel processing details best supercell multiple samples parallel. load_balancing logical whether load balancing performed multiple samples \"supercelled\" parallel. Please go section parallel processing details best supercell multiple samples parallel. Default FALSE.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"runSuperCellCyto return list following components: supercell_object: list containing object returned SCimplify function. One object per sample. supercell_expression_matrix: data.table containing marker expression supercells. computed taking average marker expression cells captured supercell. supercell_cell_map: data.table showing cell captured supercell. useful intend work supercell captures cell.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"supercell-multiple-samples-in-parallel","dir":"Reference","previous_headings":"","what":"Supercell multiple samples in parallel","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"function supercell multiple samples parallel, need supply BiocParallelParam (BPPARAM parameter) leverages parallel evaluation, e.g., MulticoreParam SnowParam. Importantly, also recommended set number tasks (task parameter) number samples , set load_balancing parameter TRUE. way, jobs handling large samples responsible (mostly) sample, small ones handled jobs handling much smaller samples.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"what-is-cell-id-colname","dir":"Reference","previous_headings":"","what":"What is cell_id_colname","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"column dt containing unique identifier cell. Commonly, manually create column FCS file typically field uniquely identify cell. can create ID giving cells numeric value 1 however many , store column dt. know , refer vignette.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"what-constitute-a-sample","dir":"Reference","previous_headings":"","what":"What constitute a sample","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"function designed samples processed, independent . , can safely assume supercell contain cells exactly one sample. function work cells come sample based specified sample_colname column. critical specify column . purposes, sample represents biological sample experiment. may thinking, possible use different context, say creating supercells population cluster rather biological sample? short answer yes, address vignette.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"computing-pca","dir":"Reference","previous_headings":"","what":"Computing PCA","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"default, function start computing PCA markers specified markers parameter, 10 PCs computed. less 10 markers markers parameter, number PCs set however many markers markers parameter. Notably, scaling transformation done markers' expressions prior computing PCs. irlba used calculate PCA cytometry data tend handful features (markers) compared scRNAseq data. Hence little gain.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"setting-the-supercell-graining-level","dir":"Reference","previous_headings":"","what":"Setting the supercell graining level","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"many supercells get dataset? phrase another way, can estimate many cells captured within supercell? depends set gam parameter . gam parameter represented formula gamma=n_cells/n_supercells n_cells denotes number cells n_supercells denotes number supercells created. resolving formula, can roughly estimate many supercells get end, thus, approximately many cells captured within supercell. Generally, smaller gam parameter , supercells get. Say instance 10,000 cells. gam set 10, end 1,000 supercells, whereas gam set 50, end 200 supercells. Conversely, get supercells (.e. smaller gam value), smaller size . words, capturing less cells. Importantly, one expect supercells size. capture /less cells , trivial estimate many captured beforehand. may look swapping gam value many cells captured within supercell future. thoughts required whether make sense. Lastly, now, gam value samples (read section sure mean samples ). future, can perhaps look setting different gam values different samples.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"computing-knn-network","dir":"Reference","previous_headings":"","what":"Computing kNN network","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"parameter k_knn governs k value used compute single-cell kNN network. Actual (approximate) kNN network created, walktrap algorithm used form supercells kNN network.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run SuperCell for cytometry data — runSuperCellCyto","text":"","code":"# Simulate some data set.seed(42) cyto_dat <- simCytoData(nmarkers = 10, ncells = rep(2000,2))  # Setup the columns designating the markers, samples, and cell IDs marker_col <- paste0(\"Marker_\", seq_len(10)) sample_col <- \"Sample\" cell_id_col <- \"Cell_Id\"  supercell_dat <- runSuperCellCyto(     cyto_dat, marker_col,     sample_col, cell_id_col )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates cytometry data — simCytoData","title":"Simulates cytometry data — simCytoData","text":"Simulates cytometry data use testing documenting functions require cytometry data. Please run set.seed running function want ensure reproducibility.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates cytometry data — simCytoData","text":"","code":"simCytoData(nmarkers = 10, ncells = rep(10000, 2))"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates cytometry data — simCytoData","text":"nmarkers numeric specifying number markers simulate. ncells numeric vector number cells simulate per sample. 1 vector element per sample.#'","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates cytometry data — simCytoData","text":"data.table containing simulated data. Rows cells, columns markers.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulates cytometry data — simCytoData","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates cytometry data — simCytoData","text":"","code":"set.seed(42) cyto_dat <- simCytoData() head(cyto_dat) #>    Marker_1 Marker_2  Marker_3 Marker_4 Marker_5 Marker_6 Marker_7 Marker_8 #> 1: 18.61597 17.43348  9.213419 18.40881 13.68860 12.77402 15.24751 7.140615 #> 2: 20.23361 19.82792  9.740510 18.16383 13.97108 14.25898 16.05032 5.863752 #> 3: 18.62743 17.76816 11.175358 18.59606 16.08534 13.69734 16.71550 4.750240 #> 4: 20.74051 19.94771  9.797939 18.43590 13.92092 12.64266 15.55953 8.173464 #> 5: 18.65938 18.87830  8.916928 17.83295 15.62066 11.37118 16.08417 6.664707 #> 6: 20.02696 20.76054  9.262685 16.89373 15.92339 13.40002 16.13880 6.862717 #>    Marker_9 Marker_10   Sample Cell_Id #> 1: 14.37555  14.18484 Sample_1  Cell_1 #> 2: 15.58007  15.56981 Sample_1  Cell_2 #> 3: 14.16156  14.92222 Sample_1  Cell_3 #> 4: 14.26637  15.10761 Sample_1  Cell_4 #> 5: 15.12219  15.64231 Sample_1  Cell_5 #> 6: 15.85313  15.52535 Sample_1  Cell_6 dim(cyto_dat) #> [1] 20000    12"}]
