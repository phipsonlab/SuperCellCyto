[{"path":[]},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement putri.g@wehi.edu.au. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to SuperCellCyto","title":"Contributing to SuperCellCyto","text":"outlines propose change SuperCellCyto.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":"making-changes-to-the-package","dir":"","previous_headings":"","what":"Making changes to the package","title":"Contributing to SuperCellCyto","text":"want make change, please first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Making changes to the package","what":"Pull request process","title":"Contributing to SuperCellCyto","text":"Fork package clone onto computer. Install development dependencies devtools::install_dev_deps(). Create Git branch pull request (PR). can use usethis::pr_init(\"brief-description--change\"). Make changes, commit git. Make sure unit tests passing. can use devtools::test(). Create PR. Make sure title PR briefly describe change, body PR contain Fixes #issue-number.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to SuperCellCyto","text":"Please note SuperCellCyto project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to create supercells","text":"vignette describes steps reduce size vast high-dimensional cytometry data using SuperCellCyto, R package based SuperCell R package David Gfeller lab University Lausanne. Please note ’re still actively updating vignette (fact package ), welcome feedbacks improve . myriad ways use SuperCell. try cover many use cases possible, bound miss something. case, please reach github repository creating Github issue.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"How to create supercells","text":"install SuprCellCyto, need use devtools package CRAN. can install devtools using install.packages(\"devtools\") command. Thereafter, can install SuperCellCyto using devtools::install_github(\"phipsonlab/SuperCellCyto\"). SuperCellCyto requires SuperCell R package installed run properly. use devtools::install_github command install SuperCellCyto, , theory, automatically installed. case doesn’t, can manually install using devtools::install_github(\"GfellerLab/SuperCell\").","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"preparing-your-dataset","dir":"Articles","previous_headings":"","what":"Preparing your dataset","title":"How to create supercells","text":"function creates supercells called runSuperCellCyto, operates data.table object, enhanced version R native data.frame. may add support SummarizedExperiment flowFrame object future enough demands . raw data stored csv file, can import data.table object using fread function. raw data stored across multiple csv files FCS files (common cytometry), need help Spectre R package import adata.table object. Specifically, need : Run read.files function read FCS csv files. Run .merge.files merge resulting data.table objects one. unsure steps work , look example Spectre vignette. Using vignette , csv files, can run steps vignette , changing InputDirectory variable. FCS files, need change file.type parameter read.files function .fcs. vignette, simulate toy data using simCytoData function. several things note dataset. Let’s go one one sub-section .","code":"n_markers <- 15 n_samples <- 3 dat <- SuperCellCyto::simCytoData(nmarkers = n_markers, ncells = rep(10000, n_samples)) head(dat) #>    Marker_1 Marker_2 Marker_3 Marker_4 Marker_5  Marker_6 Marker_7 Marker_8 #> 1: 8.613145 12.27848 11.47877 15.85943 6.292417  9.371754 15.48644 8.502447 #> 2: 8.444047 13.61751 15.42910 13.23521 7.337523 10.848695 16.41428 9.049085 #> 3: 9.508217 13.27955 14.49741 15.32714 7.184697  9.229750 17.25246 7.224527 #> 4: 8.727552 12.33650 13.08252 14.59704 6.344520 11.025034 16.08588 9.787236 #> 5: 8.705266 11.54711 15.09200 12.14086 5.916500  9.986064 16.82250 7.815844 #> 6: 9.809956 13.59739 14.26858 14.35567 7.930409 10.782738 17.08411 9.334017 #>    Marker_9 Marker_10 Marker_11 Marker_12 Marker_13 Marker_14 Marker_15 #> 1: 6.343346  8.611583  14.99405  13.14672  8.453014  4.727143  10.77041 #> 2: 7.766555  9.717384  16.61520  13.32699  7.155631  4.038144  10.97021 #> 3: 7.125987  8.541820  16.23950  14.86434  9.294373  5.023199  10.42803 #> 4: 5.642658  7.652166  14.94492  12.52479  6.494958  3.826238  10.97673 #> 5: 7.423770  7.872997  15.01467  14.43692  7.627948  3.731901  11.81326 #> 6: 7.971358  9.705231  14.84054  13.69212  8.225082  4.368337  11.46224 #>      Sample Cell_Id #> 1: Sample_1  Cell_1 #> 2: Sample_1  Cell_2 #> 3: Sample_1  Cell_3 #> 4: Sample_1  Cell_4 #> 5: Sample_1  Cell_5 #> 6: Sample_1  Cell_6"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"the-markers","dir":"Articles","previous_headings":"Preparing your dataset","what":"The markers","title":"How to create supercells","text":"runSuperCellCyto function perform data transformation scaling. Thus, must ensure dataset already appropriately transformed using either arc-sinh transformation linear binning (using FlowJo). tutorial explains data transformation process great detail: (https://wiki.centenary.org.au/display/SPECTRE/Data+transformation). Please read unsure transform data. toy dataset, transform data using arc-sinh transformation implementation provided base R asinh function: Breaking steps, : Identify columns denoting markers. Set co-factor 5. transformation store dat_asinh variable. Set dat_asinh column name reflect values column (marker) haas undergone arc-sinh transformation. Combine dat dat_asinh using cbind.","code":"# Specify which columns are the markers to transform marker_cols <- paste0(\"Marker_\", seq_len(n_markers)) # The co-factor for arc-sinh cofactor <- 5  # Do the transformation dat_asinh <- asinh(dat[, marker_cols, with = FALSE] / cofactor)  # Rename the new columns marker_cols_asinh <- paste0(marker_cols, \"_asinh\") names(dat_asinh) <- marker_cols_asinh  # Add them our previously loaded data dat <- cbind(dat, dat_asinh)  head(dat[, marker_cols_asinh, with = FALSE]) #>    Marker_1_asinh Marker_2_asinh Marker_3_asinh Marker_4_asinh Marker_5_asinh #> 1:       1.312237       1.630650       1.568585       1.871444       1.052882 #> 2:       1.295133       1.727183       1.845241       1.700499       1.176602 #> 3:       1.398763       1.703628       1.786171       1.838936       1.159267 #> 4:       1.323668       1.635018       1.689651       1.792648       1.059348 #> 5:       1.321450       1.574029       1.824249       1.620219       1.005238 #> 6:       1.426507       1.725796       1.771144       1.776888       1.241584 #>    Marker_6_asinh Marker_7_asinh Marker_8_asinh Marker_9_asinh Marker_10_asinh #> 1:       1.385989       1.848771       1.301069      1.0592027        1.312080 #> 2:       1.517067       1.904290       1.355198      1.2239756        1.418068 #> 3:       1.372541       1.952030       1.163809      1.1525410        1.305053 #> 4:       1.531730       1.884975       1.424442      0.9694039        1.211527 #> 5:       1.442388       1.927814       1.229300      1.1862764        1.235444 #> 6:       1.511531       1.942615       1.382431      1.2459434        1.416955 #>    Marker_11_asinh Marker_12_asinh Marker_13_asinh Marker_14_asinh #> 1:        1.818070        1.694225        1.296046       0.8422546 #> 2:        1.915935        1.706966        1.155942       0.7386142 #> 3:        1.894055        1.809832        1.378680       0.8846507 #> 4:        1.814957        1.649071        1.077836       0.7053006 #> 5:        1.819374        1.782220        1.208874       0.6902489 #> 6:        1.808313        1.732314        1.272603       0.7891656 #>    Marker_15_asinh #> 1:        1.510494 #> 2:        1.527193 #> 3:        1.481277 #> 4:        1.527733 #> 5:        1.594977 #> 6:        1.567263"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"cell-id-column","dir":"Articles","previous_headings":"Preparing your dataset","what":"Cell id column","title":"How to create supercells","text":"create supercell, must provide column uniquely identify cell, akin Cell_Id column toy data generated : purpose cell id allow SuperCell uniquely identify cell dataset. ID come super handy later /need work cells belong supercells. Generally, need create ID . dataset won’t come ID already embedded . simple cell id can made concatenating word Cell row number. Something like following: , store cell id column called Cell_id_dummy. values Cell_1, Cell_2, way Cell_x x number cells dataset. Note, can name cell id column however like, id, cell_identity, etc. Importantly, need make sure note column name need pass runSuperCellCyto function later.","code":"head(dat$Cell_Id, n = 10) #>  [1] \"Cell_1\"  \"Cell_2\"  \"Cell_3\"  \"Cell_4\"  \"Cell_5\"  \"Cell_6\"  \"Cell_7\"  #>  [8] \"Cell_8\"  \"Cell_9\"  \"Cell_10\" dat$Cell_id_dummy <- paste0(\"Cell_\", seq_len(nrow(dat))) head(dat$Cell_id_dummy, n = 10) #>  [1] \"Cell_1\"  \"Cell_2\"  \"Cell_3\"  \"Cell_4\"  \"Cell_5\"  \"Cell_6\"  \"Cell_7\"  #>  [8] \"Cell_8\"  \"Cell_9\"  \"Cell_10\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"sample-column","dir":"Articles","previous_headings":"Preparing your dataset","what":"Sample column","title":"How to create supercells","text":"notice toy data , column called Sample. default, column refers biological sample cells come . toy data , 3 samples, Sample_1, Sample_2, Sample_3: 10,000 cells per sample: create supercells, necessary Sample column dataset. can name column however like, Samp, Cell_Samp. However, make sure note column name need pass runSuperCellCyto function. [Creating supercells][#creating-supercells] section. 1 biological sample dataset? matter. still need column dataset, pass column name runSuperCellCyto function. difference column 1 unique value. need ? ensure supercell contains cells exactly 1 sample. , general, make sense mix cells different biological samples one supercell. Additionally (important), runSuperCellCyto function can process samples parallel set BPPARAM parameter BiocParallelParam class leverage parallel processing. Running runSuperCellCyto parallel section . However, want supercell contain cells different biological samples, need create new Sample column containing exactly 1 unique value, pass column name runSuperCellCyto function. : may wonder whether possible use SuperCellCyto reduce number cells captured cluster (cell type) can make UMAP/tSNE plot crowded? Commonly cytometry, use stratified sampling subsample clusters drawing UMAP/tSNE plot avoid overcrowding . short answer , yes can. See Using runSuperCellCyto stratified summarising section information.","code":"unique(dat$Sample) #> [1] \"Sample_1\" \"Sample_2\" \"Sample_3\" table(dat$Sample) #>  #> Sample_1 Sample_2 Sample_3  #>    10000    10000    10000"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"creating-supercells","dir":"Articles","previous_headings":"","what":"Creating supercells","title":"How to create supercells","text":"Now imported data, let’s create supercells. First, let’s store markers, sample, cell id column variables: pass , together dataset runSuperCellCyto function create supercells: Now let’s dig deeper object created: list containing 3 elements:","code":"markers_col <- paste0(\"Marker_\", seq_len(n_markers), \"_asinh\") sample_col <- \"Sample\" cell_id_col <- \"Cell_Id_dummy\" supercells <- runSuperCellCyto(   dt = dat,   markers = markers_col,   sample_colname = sample_col,   cell_id_colname = cell_id_col ) #> Warning in SCimplify(X = mt, genes.use = rownames(mt), do.scale = FALSE, : colnames(X) is Null,  #> Gene expression matrix X is expected to have cellIDs as colnames!  #> CellIDs will be created automatically in a form 'cell_i'  #> Warning in SCimplify(X = mt, genes.use = rownames(mt), do.scale = FALSE, : colnames(X) is Null,  #> Gene expression matrix X is expected to have cellIDs as colnames!  #> CellIDs will be created automatically in a form 'cell_i'  #> Warning in SCimplify(X = mt, genes.use = rownames(mt), do.scale = FALSE, : colnames(X) is Null,  #> Gene expression matrix X is expected to have cellIDs as colnames!  #> CellIDs will be created automatically in a form 'cell_i' class(supercells) #> [1] \"list\" names(supercells) #> [1] \"supercell_expression_matrix\" \"supercell_cell_map\"          #> [3] \"supercell_object\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercell-object","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell object","title":"How to create supercells","text":"supercell_object contains metadata used create supercells. list, element contains metadata used create supercells sample. come handy need debug supercells later line.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercell-expression-matrix","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell expression matrix","title":"How to create supercells","text":"supercell_expression_matrix contains marker expression supercell. calculated taking average marker expression cells contained within supercell. Therein, following columns: markers previously specified markers_col variable. column (Sample case) denoting sample supercell belongs , (note column name stored sample_col variable). SuperCellId column denoting unique ID supercell.","code":"head(supercells$supercell_expression_matrix) #>    Marker_1_asinh Marker_2_asinh Marker_3_asinh Marker_4_asinh Marker_5_asinh #> 1:       1.264766       1.684169       1.748368       1.788664      0.9973134 #> 2:       1.300619       1.706533       1.743982       1.797021      1.1395078 #> 3:       1.380854       1.663947       1.710558       1.759018      0.9370305 #> 4:       1.172451       1.677868       1.737744       1.777133      0.9960757 #> 5:       1.204584       1.704318       1.746477       1.796652      1.2397711 #> 6:       1.345840       1.691527       1.747664       1.774837      0.8885885 #>    Marker_6_asinh Marker_7_asinh Marker_8_asinh Marker_9_asinh Marker_10_asinh #> 1:       1.549610       1.913162       1.431371       1.131703        1.382052 #> 2:       1.530629       1.921592       1.518904       1.050195        1.342751 #> 3:       1.494180       1.896908       1.393027       1.093162        1.123521 #> 4:       1.497948       1.929390       1.347520       1.033888        1.301701 #> 5:       1.402733       1.920214       1.377683       1.003403        1.159945 #> 6:       1.414919       1.899307       1.446175       1.120004        1.239734 #>    Marker_11_asinh Marker_12_asinh Marker_13_asinh Marker_14_asinh #> 1:        1.830774        1.776173        1.215677       0.9110168 #> 2:        1.832855        1.811177        1.278195       0.7774752 #> 3:        1.793451        1.770732        1.252679       0.8274059 #> 4:        1.812060        1.793503        1.282339       0.7681560 #> 5:        1.823652        1.779230        1.278131       0.9229247 #> 6:        1.809973        1.742942        1.297757       1.0299323 #>    Marker_15_asinh   Sample                 SuperCellId #> 1:        1.481482 Sample_1 SuperCell_1_Sample_Sample_1 #> 2:        1.463727 Sample_1 SuperCell_2_Sample_Sample_1 #> 3:        1.422810 Sample_1 SuperCell_3_Sample_Sample_1 #> 4:        1.437886 Sample_1 SuperCell_4_Sample_Sample_1 #> 5:        1.490259 Sample_1 SuperCell_5_Sample_Sample_1 #> 6:        1.552772 Sample_1 SuperCell_6_Sample_Sample_1 names(supercells$supercell_expression_matrix) #>  [1] \"Marker_1_asinh\"  \"Marker_2_asinh\"  \"Marker_3_asinh\"  \"Marker_4_asinh\"  #>  [5] \"Marker_5_asinh\"  \"Marker_6_asinh\"  \"Marker_7_asinh\"  \"Marker_8_asinh\"  #>  [9] \"Marker_9_asinh\"  \"Marker_10_asinh\" \"Marker_11_asinh\" \"Marker_12_asinh\" #> [13] \"Marker_13_asinh\" \"Marker_14_asinh\" \"Marker_15_asinh\" \"Sample\"          #> [17] \"SuperCellId\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercellid","dir":"Articles","previous_headings":"Creating supercells > Supercell expression matrix","what":"SuperCellId","title":"How to create supercells","text":"Let’s look SuperCellId: Let’s break one , SuperCell_1_Sample_Sample_1. SuperCell_1 numbering (1 however many supercells sample) used uniquely identify supercell sample. Notably, may encounter (SuperCell_1, SuperCell_2) repeated across different samples, e.g., 3 supercells’ id pre-fixed SuperCell_1, make equal one another! SuperCell_1_Sample_Sample_1 contain cells Sample_1 SuperCell_1_Sample_Sample_2 contain cells Sample_2. now, may noticed appended sample name supercell id. aids differentiating supercells different samples.","code":"head(unique(supercells$supercell_expression_matrix$SuperCellId)) #> [1] \"SuperCell_1_Sample_Sample_1\" \"SuperCell_2_Sample_Sample_1\" #> [3] \"SuperCell_3_Sample_Sample_1\" \"SuperCell_4_Sample_Sample_1\" #> [5] \"SuperCell_5_Sample_Sample_1\" \"SuperCell_6_Sample_Sample_1\" supercell_ids <- unique(supercells$supercell_expression_matrix$SuperCellId) supercell_ids[grep(\"SuperCell_1_\", supercell_ids)] #> [1] \"SuperCell_1_Sample_Sample_1\" \"SuperCell_1_Sample_Sample_2\" #> [3] \"SuperCell_1_Sample_Sample_3\""},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"supercell-cell-map","dir":"Articles","previous_headings":"Creating supercells","what":"Supercell cell map","title":"How to create supercells","text":"supercell_cell_map maps cell dataset supercell belongs . map useful later need expand supercells . Additionally, also reason need column dataset uniquely identify cell.","code":"head(supercells$supercell_cell_map) #>                      SuperCellID   Sample #> 1: SuperCell_427_Sample_Sample_1 Sample_1 #> 2: SuperCell_194_Sample_Sample_1 Sample_1 #> 3:  SuperCell_21_Sample_Sample_1 Sample_1 #> 4:  SuperCell_40_Sample_Sample_1 Sample_1 #> 5: SuperCell_138_Sample_Sample_1 Sample_1 #> 6:  SuperCell_80_Sample_Sample_1 Sample_1"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"running-runsupercellcyto-in-parallel","dir":"Articles","previous_headings":"","what":"Running runSuperCellCyto in parallel","title":"How to create supercells","text":"default, runSuperCellCyto process sample one . sample processed independent one another, can process parallel. , need create BiocParallelParam object leverages parallel processing. Additionally, also set number tasks number samples, set load_balancing parameter TRUE jobs supercelling large samples assigned small samples (instead given supercelling smaller samples). Notably, set workers total number cores computer, render computer useless anything else (might blow RAM). find total number cores computer, can use parallel’s detectCores.","code":"n_cores <- detectCores() supercell_par <- runSuperCellCyto(   dt = dat,   markers = markers_col,   sample_colname = sample_col,   cell_id_colname = cell_id_col,   BPPARAM = MulticoreParam(     workers = n_cores - 1,     tasks = n_samples   ),   load_balancing = TRUE )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"controlling-the-supercells-granularity","dir":"Articles","previous_headings":"","what":"Controlling the supercells’ granularity","title":"How to create supercells","text":"described runSuperCellCyto function’s documentation, let’s briefly go . runSuperCellCyto function equipped various parameters can customise alter composition supercells. one likely used gam parameter. gam parameter controls many supercells generate, indirectly, many cells captured within supercell. parameter resolved following formula gam=n_cells/n_supercells n_cell denotes number cells n_supercells denotes number supercells. general, larger gam parameter set , less supercells get. Say instance 10,000 cells. gam set 10, end 1,000 supercells, whereas gam set 50, end 200 supercells. may noticed, reading sections , runSuperCellCyto ran sample independent , can set 1 value gam parameter. Indeed, now, gam value used across samples, depending many cells sample, end different number supercells sample. instance, say 10,000 cells sample 1, 100,000 cells sample 2. gam set 10, sample 1, get 1,000 supercells (10,000/10) sample 2, get 10,000 supercells (100,000/10). future, may add ability specify different gam value different samples. now, want , need break data multiple data.table objects, containing data 1 sample, run runSuperCellCyto function different gam parameter value. Something like following: Subsequently, extract combine supercell_expression_matrix supercell_cell_map, need use rbind:","code":"n_markers <- 10 dat <- simCytoData(nmarkers = n_markers) markers_col <- paste0(\"Marker_\", seq_len(n_markers)) sample_col <- \"Sample\" cell_id_col <- \"Cell_Id\"  samples <- unique(dat[[sample_col]]) gam_values <- c(10, 20, 10)  supercells_diff_gam <- lapply(seq_len(length(samples)), function(i) {   sample <- samples[i]   gam <- gam_values[i]   dat_samp <- dat[dat$Sample == sample, ]   supercell_samp <- runSuperCellCyto(     dt = dat_samp,     markers = markers_col,     sample_colname = sample_col,     cell_id_colname = cell_id_col,     gam = gam   )   return(supercell_samp) }) supercell_expression_matrix <- do.call(   \"rbind\", lapply(supercells_diff_gam, function(x) x[[\"supercell_expression_matrix\"]]) )  supercell_cell_map <- do.call(   \"rbind\", lapply(supercells_diff_gam, function(x) x[[\"supercell_cell_map\"]]) ) rbind(head(supercell_expression_matrix, n = 3), tail(supercell_expression_matrix, n = 3)) #>     Marker_1  Marker_2  Marker_3 Marker_4 Marker_5  Marker_6 Marker_7 Marker_8 #> 1: 12.597362 18.563892  7.939731 17.53654 20.16769 10.109291 20.08783 16.53032 #> 2: 12.612559 19.527094  9.127097 16.71297 19.01135 10.000790 19.22212 17.74209 #> 3: 11.751343 19.304758  8.749553 17.68459 20.15861 11.332877 18.80278 18.91703 #> 4:  7.468624  6.504929 19.134719 16.50861 13.61697  5.884649 11.17226 13.54510 #> 5:  4.423812  6.820534 16.989851 18.05577 15.46220  7.110407 14.37311 14.21248 #> 6:  5.456059  6.600613 20.530448 17.10953 15.22410  7.192285 14.12641 14.91185 #>    Marker_9 Marker_10   Sample                   SuperCellId #> 1: 13.37707 10.637396 Sample_1   SuperCell_1_Sample_Sample_1 #> 2: 12.08168  9.940211 Sample_1   SuperCell_2_Sample_Sample_1 #> 3: 11.57253 11.346711 Sample_1   SuperCell_3_Sample_Sample_1 #> 4: 17.72237 12.940699 Sample_2 SuperCell_498_Sample_Sample_2 #> 5: 17.39007 13.409344 Sample_2 SuperCell_499_Sample_Sample_2 #> 6: 16.39534 12.380849 Sample_2 SuperCell_500_Sample_Sample_2 rbind(head(supercell_cell_map, n = 3), tail(supercell_cell_map, n = 3)) #>                      SuperCellID     CellId   Sample #> 1: SuperCell_949_Sample_Sample_1     Cell_1 Sample_1 #> 2: SuperCell_735_Sample_Sample_1     Cell_2 Sample_1 #> 3: SuperCell_190_Sample_Sample_1     Cell_3 Sample_1 #> 4: SuperCell_163_Sample_Sample_2 Cell_19998 Sample_2 #> 5:  SuperCell_95_Sample_Sample_2 Cell_19999 Sample_2 #> 6: SuperCell_327_Sample_Sample_2 Cell_20000 Sample_2"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"using-runsupercellcyto-for-stratified-summarising","dir":"Articles","previous_headings":"","what":"Using runSuperCellCyto for stratified summarising","title":"How to create supercells","text":"previously mentioned, can use runSuperCellCyto perform stratified summarising, .e., summarise (well, meaningfully sub-sample) cluster cell type. , need change sample column denotes cell type cluster cell belongs . example, let’s first cluster toy data k-means: perform stratified summarising, supply cluster column (kmeans_clusters example ), runSuperCellCyto’s sample_colname parameter. Now, look supercell_expression_matrix, row (supercell) denoted cluster belongs , biological sample came : look number supercells created check many cells cluster, find , cluster, get approximately n_cells/20 20 gam parameter value used runSuperCellCyto (default).","code":"set.seed(42)  # Simulate some data dat <- simCytoData() markers_col <- paste0(\"Marker_\", seq_len(10)) cell_id_col <- \"Cell_Id\"  # Run kmeans clust <- kmeans(   x = dat[, markers_col, with = FALSE],   centers = 5 )  clust_col <- \"kmeans_clusters\" dat[[clust_col]] <- paste0(\"cluster_\", clust$cluster) supercells <- runSuperCellCyto(   dt = dat,   markers = markers_col,   sample_colname = clust_col,   cell_id_colname = cell_id_col ) # Inspect the top 3 and bottom 3 of the expression matrix and some columns. rbind(   head(supercells$supercell_expression_matrix, n = 3),   tail(supercells$supercell_expression_matrix, n = 3) )[, c(\"kmeans_clusters\", \"SuperCellId\", \"Marker_10\")] #>    kmeans_clusters                    SuperCellId Marker_10 #> 1:       cluster_4   SuperCell_1_Sample_cluster_4  14.64662 #> 2:       cluster_4   SuperCell_2_Sample_cluster_4  14.66858 #> 3:       cluster_4   SuperCell_3_Sample_cluster_4  14.41837 #> 4:       cluster_5 SuperCell_498_Sample_cluster_5  16.99003 #> 5:       cluster_5 SuperCell_499_Sample_cluster_5  17.09864 #> 6:       cluster_5 SuperCell_500_Sample_cluster_5  15.85447 # Compute how many cells per cluster, and divide by 20, the gamma value. table(dat$kmeans_clusters) / 20 #>  #> cluster_1 cluster_2 cluster_3 cluster_4 cluster_5  #>    120.25    130.30    119.75    129.70    500.00 table(supercells$supercell_expression_matrix$kmeans_clusters) #>  #> cluster_1 cluster_2 cluster_3 cluster_4 cluster_5  #>       120       130       120       130       500"},{"path":"https://phipsonlab.github.io/SuperCellCyto/articles/how_to_supercell.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"How to create supercells","text":"","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] parallel  stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] BiocParallel_1.36.0 SuperCellCyto_0.1.0 BiocStyle_2.30.0    #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.6-1.1      jsonlite_1.8.8      compiler_4.3.2      #>  [4] BiocManager_1.30.22 Rcpp_1.0.12         stringr_1.5.1       #>  [7] SuperCell_1.0       jquerylib_0.1.4     systemfonts_1.0.5   #> [10] textshaping_0.3.7   yaml_2.3.8          fastmap_1.1.1       #> [13] lattice_0.21-9      plyr_1.8.9          R6_2.5.1            #> [16] igraph_1.6.0        knitr_1.45          bookdown_0.37       #> [19] desc_1.4.3          bslib_0.6.1         rlang_1.1.3         #> [22] cachem_1.0.8        stringi_1.8.3       RANN_2.6.1          #> [25] xfun_0.41           fs_1.6.3            sass_0.4.8          #> [28] memoise_2.0.1       cli_3.6.2           pkgdown_2.0.7       #> [31] magrittr_2.0.3      digest_0.6.34       grid_4.3.2          #> [34] lifecycle_1.0.4     vctrs_0.6.5         evaluate_0.23       #> [37] glue_1.7.0          data.table_1.14.10  codetools_0.2-19    #> [40] ragg_1.2.7          rmarkdown_2.25      purrr_1.0.2         #> [43] pkgconfig_2.0.3     tools_4.3.2         htmltools_0.5.7"},{"path":"https://phipsonlab.github.io/SuperCellCyto/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Givanna Putri. Author, maintainer. George Howitt. Author. Marsh-Wakefield Felix. Author. Thomas Ashhurst. Author. Belinda Phipson. Author.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Putri G, Howitt G, Felix M, Ashhurst T, Phipson B (2024). SuperCellCyto: SuperCell Cytometry Data. R package version 0.1.0, https://phipsonlab.github.io/SuperCellCyto/.","code":"@Manual{,   title = {SuperCellCyto: SuperCell For Cytometry Data},   author = {Givanna Putri and George Howitt and Marsh-Wakefield Felix and Thomas Ashhurst and Belinda Phipson},   year = {2024},   note = {R package version 0.1.0},   url = {https://phipsonlab.github.io/SuperCellCyto/}, }"},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"supercellcyto","dir":"","previous_headings":"","what":"SuperCell For Cytometry Data","title":"SuperCell For Cytometry Data","text":"SuperCellCyto extension SuperCell R package. Initially developed scRNAseq data, SuperCell aggregates cells similar transcriptomic profiles “supercells” (also known “metacells” scRNAseq literature). SuperCellCyto, ’ve tailored SuperCell package specifically cater cytometry data: Supercells now aggregating cells similar marker expressions. Supercells now created individual sample. adaptation ensures supercell encompasses cells exclusively one sample. processing sample independently, prevent intermixing cells different samples within supercells. Multiple samples can now processed parallel custom load balancing strategy. enhancement enables simultaneous generation supercells multiple samples, significantly reducing computational time required processing large datasets.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"vignettes-and-function-documentation","dir":"","previous_headings":"","what":"Vignettes and Function Documentation","title":"SuperCell For Cytometry Data","text":"understand SuperCellCyto can integrated workflow, head Articles page. Click dropdown arrow Articles link navbar top website. vignettes provide step--step guides, practical examples, use-case scenarios demonstrate package’s application various research contexts. Documentation usage function SuperCellCyto package available Reference page. Click Reference link navbar top website.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"SuperCell For Cytometry Data","text":"use SuperCellCyto study, please kindly cite preprint bioRxiv: Putri, G. H., Howitt, G., Marsh-Wakefield, F., Ashhurst, T. M., & Phipson, B. (2023). SuperCellCyto: enabling efficient analysis large scale cytometry datasets. bioRxiv; DOI: https://doi.org/10.1101/2023.08.14.553168","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SuperCell For Cytometry Data","text":"package can installed using remotes: SuperCellCyto requires SuperCell R package installed run properly. use installation command , , theory, automatically installed. case doesn’t, please manually install running following command beforehand:","code":"# Install remotes install.packages(\"remotes\")  # Install SuperCellCyto from this repository remotes::install_github(\"phipsonlab/SuperCellCyto\") # Install SuperCell from their github repository remotes::install_github(\"GfellerLab/SuperCell\")"},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"SuperCell For Cytometry Data","text":"Please note SuperCellCyto project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/index.html","id":"contribution-guide","dir":"","previous_headings":"","what":"Contribution guide","title":"SuperCell For Cytometry Data","text":"Please visit Contributing Guide","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompute supercells — recomputeSupercells","title":"Recompute supercells — recomputeSupercells","text":"Given supercell object, recreate supercells using different gamma value. Gamma value controls number supercells generated. smaller value, supercells get, vice versa. function run, need least run runSuperCellCyto function !","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompute supercells — recomputeSupercells","text":"","code":"recomputeSupercells(   dt,   sc_objects,   markers,   sample_colname,   cell_id_colname,   gam = 20 )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompute supercells — recomputeSupercells","text":"dt data.table object containing cytometry data rows represent cells columns represent markers. sc_objects supercell_object returned runSuperCellCyto function. markers character vector identifying markers create supercells . sample_colname character string identifying column dt denotes sample cell. cell_id_colname character string identifying column dt representing cell's unique ID. gam numeric value specifying gamma value regulates number supercells generated. Defaults 20.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recompute supercells — recomputeSupercells","text":"list following components: supercell_expression_matrix:  data.table object contains marker expression supercell. marker expressions computed calculating mean marker expressions across cells within individual supercell. supercell_cell_map: data.table maps cell corresponding supercell. table essential identifying specific supercell cell allocated . proves particularly useful analyses require one expand supercells individual cell level.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recompute supercells — recomputeSupercells","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/recomputeSupercells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recompute supercells — recomputeSupercells","text":"","code":"set.seed(42) cyto_dat <- simCytoData(10, rep(1000, 3)) markers <- paste0(\"Marker_\", seq_len(10)) out_gam20 <- runSuperCellCyto(     dt = cyto_dat,     markers = markers,     sample_colname = \"Sample\",     cell_id_colname = \"Cell_Id\",     gam = 20 ) recomputed_sc <- recomputeSupercells(     dt = cyto_dat,     sc_objects = out_gam20$supercell_object,     markers = markers,     sample_colname = \"Sample\",     cell_id_colname = \"Cell_Id\",     gam = 50 )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"function creates supercells cytometry data formatted data.table object using SuperCellCyto algorithm. Please make sure read additional details better understand function works.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"","code":"runSuperCellCyto(   dt,   markers,   sample_colname,   cell_id_colname,   gam = 20,   k_knn = 5,   BPPARAM = SerialParam(),   load_balancing = FALSE )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"dt data.table object containing cytometry data rows represent cells columns represent markers. data.frame object, function try convert data.table object. warning message displayed happens. Otherwise, terminate. markers character vector identifying markers create supercells . sample_colname character string identifying column dt denotes sample cell. cell_id_colname character string identifying column dt representing cell's unique ID. gam numeric value specifying gamma value regulates number supercells generated. Defaults 20. k_knn numeric value specifying k value (number neighbours) used build kNN network. Defaults 5. BPPARAM BiocParallelParam object specifying parallel processing settings. Defaults SerialParam, meaning samples processed sequentially one . Refer additional details section parallel processing details. load_balancing logical value  indicating whether use custom load balancing scheme processing multiple samples parallel. Defaults FALSE. Refer additional details section parallel processing details.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"list following components: supercell_object: list containing object returned SCimplify function. One object per sample. object critical recomputing supercells future. Hence discard . supercell_expression_matrix:  data.table object contains marker expression supercell. marker expressions computed calculating mean marker expressions across cells within individual supercell. supercell_cell_map: data.table maps cell corresponding supercell. table essential identifying specific supercell cell allocated . proves particularly useful analyses require one expand supercells individual cell level.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"parallel-processing","dir":"Reference","previous_headings":"","what":"Parallel Processing","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"SuperCellCyto can process multiple samples simultaneously parallel. can drastically bring processing time dataset large number samples. enable feature, set BPPARAM parameter either MulticoreParam object SnowParam object. Importantly, also recommended set number tasks (.e., task parameter either MulticoreParam SnowParam object) number samples dataset. Furthermore, also recommend setting load_balancing parameter TRUE. ensures optimal distribution samples across multiple cores, particularly important samples varying sizes (number cells).","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"cell-id-and-sample-definitions","dir":"Reference","previous_headings":"","what":"Cell ID and Sample Definitions","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"cell_id_colname parameter specifies column dt denotes unique identifier cell. perfectly normal column dataset default. good news trivial create one. can create new vector containing sequence numbers 1 however many cells , append vector new column dataset. Refer vignette . sample_colname parameter specifies column dt denotes sample cell came . default, SuperCellCyto creates supercells sample independent samples. ensures supercell contain cells exactly one sample. constitute sample? purposes, sample represents biological sample experiment. may thinking, possible use different context, say creating supercells population cluster rather biological sample? short answer yes, address vignette.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"computing-pca","dir":"Reference","previous_headings":"","what":"Computing PCA","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"function start computing PCA markers specified markers parameter. default, number PCs calculated set 10. less 10 markers markers parameter, number PCs set however many markers markers parameter. Notably, scaling transformation done markers' expressions prior computing PCs. function use irlba calculate PCA. little gain use cytometry data relatively tiny number features (markers) data.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"setting-supercell-s-resolution","dir":"Reference","previous_headings":"","what":"Setting Supercell's Resolution","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"gam parameter influences number supercells created per sample. lower gam value results , thus generally smaller supercells, vice versa. estimate many supercells get dataset, important understand gam value interpreted context number cells sample. gam=n_cells/n_supercells n_cells denotes number cells n_supercells denotes number supercells created. resolving formula , can roughly estimate many supercells get per sample. example, say 2 samples, sample B. Sample 10,000 cells, sample B 5,000 cells: gam set 10, end 1,000 supercells sample 500 supercells sample B, total 1,500 supercells. gam set 50, end 200 supercells sample 100 supercells sample B, total 300 supercells. Importantly, one expect supercells size. capture /less cells others. trivial estimate many cells captured supercell beforehand.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"computing-knn-network","dir":"Reference","previous_headings":"","what":"Computing kNN network","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"create supercells, kNN (k-Nearest Neighbors) network constructed based k_knn parameter dictates number neighbours (cell) used create network. actual (approximate) kNN network created. walktrap algorithm uses network group cells supercells.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/runSuperCellCyto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run SuperCellCyto on Cytometry Data — runSuperCellCyto","text":"","code":"# Simulate some data set.seed(42) cyto_dat <- simCytoData(nmarkers = 10, ncells = rep(2000,2))  # Setup the columns designating the markers, samples, and cell IDs marker_col <- paste0(\"Marker_\", seq_len(10)) sample_col <- \"Sample\" cell_id_col <- \"Cell_Id\"  supercell_dat <- runSuperCellCyto(     cyto_dat, marker_col,     sample_col, cell_id_col )"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate cytometry data — simCytoData","title":"Simulate cytometry data — simCytoData","text":"Simulate cytometry data use testing documenting functions require cytometry data. Please run set.seed running function want ensure reproducibility.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate cytometry data — simCytoData","text":"","code":"simCytoData(nmarkers = 10, ncells = rep(10000, 2))"},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate cytometry data — simCytoData","text":"nmarkers numeric value specifying number markers simulate. ncells numeric vector specifying number cells simulate per sample. 1 vector element per sample.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate cytometry data — simCytoData","text":"data.table object containing simulated cytometry data rows represent cells columns represent markers.","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate cytometry data — simCytoData","text":"Givanna Putri","code":""},{"path":"https://phipsonlab.github.io/SuperCellCyto/reference/simCytoData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate cytometry data — simCytoData","text":"","code":"set.seed(42) cyto_dat <- simCytoData() head(cyto_dat) #>    Marker_1 Marker_2  Marker_3 Marker_4 Marker_5 Marker_6 Marker_7 Marker_8 #> 1: 18.61597 17.43348  9.213419 18.40881 13.68860 12.77402 15.24751 7.140615 #> 2: 20.23361 19.82792  9.740510 18.16383 13.97108 14.25898 16.05032 5.863752 #> 3: 18.62743 17.76816 11.175358 18.59606 16.08534 13.69734 16.71550 4.750240 #> 4: 20.74051 19.94771  9.797939 18.43590 13.92092 12.64266 15.55953 8.173464 #> 5: 18.65938 18.87830  8.916928 17.83295 15.62066 11.37118 16.08417 6.664707 #> 6: 20.02696 20.76054  9.262685 16.89373 15.92339 13.40002 16.13880 6.862717 #>    Marker_9 Marker_10   Sample Cell_Id #> 1: 14.37555  14.18484 Sample_1  Cell_1 #> 2: 15.58007  15.56981 Sample_1  Cell_2 #> 3: 14.16156  14.92222 Sample_1  Cell_3 #> 4: 14.26637  15.10761 Sample_1  Cell_4 #> 5: 15.12219  15.64231 Sample_1  Cell_5 #> 6: 15.85313  15.52535 Sample_1  Cell_6 dim(cyto_dat) #> [1] 20000    12"},{"path":"https://phipsonlab.github.io/SuperCellCyto/news/index.html","id":"supercellcyto-010","dir":"Changelog","previous_headings":"","what":"SuperCellCyto 0.1.0","title":"SuperCellCyto 0.1.0","text":"first release SuperCellCyto. also version SuperCellCyto used preprint:","code":"@article{     putri2023supercellcyto,     title={SuperCellCyto: enabling efficient analysis of large scale cytometry datasets},     author={Putri, Givanna H and Howitt, George and Marsh-Wakefield, Felix and Ashhurst, Thomas Myles and Phipson, Belinda},     journal={bioRxiv},     pages={2023--08},     year={2023},     publisher={Cold Spring Harbor Laboratory} }"}]
